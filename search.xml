<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>01_13.day01--基础知识&amp;京东移动端</title>
      <link href="/2017/11/05/yi-dong-duan/01-13.day01-ji-chu-zhi-shi-jing-dong-yi-dong-duan/"/>
      <url>/2017/11/05/yi-dong-duan/01-13.day01-ji-chu-zhi-shi-jing-dong-yi-dong-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="day01–基础知识-amp-京东移动端"><a href="#day01–基础知识-amp-京东移动端" class="headerlink" title="day01–基础知识&amp;京东移动端"></a>day01–基础知识&amp;京东移动端</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h4><p>讲移动端这门课程，咱们先从手机开始说起，接下来我们来给大家看一张图片</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5af40a8b1cdedd88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>看这张图片的目的时为了让大家看到关于手机屏幕的一些参数，红框内的四个参数，大家一定都不陌生，我也不陌生。不过说真的，在很久以前我看到红框里的这四个参数，我并不知道这些参数时如何的来的。那接下里我们来学习一下。</p><ul><li><p><strong>屏幕尺寸(主屏尺寸)</strong></p><p>现在大家看到的是iphone5的尺寸图 <strong>主屏尺寸4英寸</strong> 那么这个4英寸是怎么算出来的呢？首先我们解释一下英寸，它是一个英制长度单位，很多显示设备都用英寸来作为度量单位4英寸代表的是手机屏幕对角线的长度，1英寸=2.54厘米。那这个尺寸就是通过勾股定理计算的来的.</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5964518c5887f3d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p><strong>屏幕分辨率</strong></p><p>在iphone5的参数图片中，我们同时也看到了一个参数 <strong>屏幕分辨率</strong> iphone5的分辨率是1136px*640px,那么这个分辨率又是怎么回事呢？<br>在讲解分辨率之前，我们首先要明白一个概念，在手机上无论是呈现一条线,<br>一个面,还是一张图像都是由最小的单位像素来表示的,你也可以简单理解为由一个个小方块组成的。比如大家看下面这幅图:</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-6f56933b239116a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  所以,分辨率1136px*640px的意思就是iphone5的手机屏幕在竖直方向有1136个像素块，在水平方向有640个像素块。</p><ul><li><p><strong>长度单位</strong></p><p>刚才我们介绍了主屏尺寸,它的单位是英寸(in),其实在我们的开发中有很多单位，但无论有多少单位,他们都会被分类到绝对长度单位或相对长度单位中。</p><ul><li>相对长度单位:相对长度单位就是会随着单位的使用的地方不同，其值会发生变化。<ul><li>比如:em px(只在表示设备分辨率的时候) %</li></ul></li><li>绝对长度单位:不会随着使用环境的变化而变化，值是绝对的。<ul><li>比如:in(英寸) cm(厘米) mm(毫米)</li></ul></li></ul></li><li><p><strong>屏幕像素密度</strong></p><p>在iphone5的参数图片中，我们同时也看到了一个参数 <strong>屏幕像素密度</strong>,它是什么意思呢？其实屏幕像素密度，即屏幕对角线每英寸所拥有的像素数，英文简称PPI(Pixels(像素) Per(每) Inch(英寸)),如何计算呢？这就必须用到上面我们讲的屏幕尺寸、屏幕分辨率,我们来看一幅图:</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-c1d809f7e6908084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  知道了像素密度如何计算,下面来说为什么说像素是一个相对长度单位，我们来看一下iphone系列手机的PPI:</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-832c44c9331876ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  通过上面的图我们可以知道iphone3GS和iphone4的屏幕都是3.5英寸,他们的分辨率iphone3GS在水平方向320px,iphone4在水平方向640px,那么在通用的屏幕尺寸下,能容纳不同的像素个数,说明像素是一个可变大小的单位。接下来我们再来说屏幕像素密度能帮我们做什么呢？下面再来看一张图</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-947e2c7f61d54009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-d8cdb82cb98abd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  通过上面的图示说明,<strong>在相同屏幕尺寸下PPI值越大,那么所能显示的图像越清晰</strong></p><ul><li><p><strong>Retina屏幕</strong></p><p>如果你明白了PPI(像素密度),那么Retina屏幕对你来说非常的简单,Retina是一个苹果注册的一个屏幕的名字，他们把PPI大于320的屏幕叫做Retina屏,也就是你们现在用的除了iphone3GS之外的其他苹果设备。</p></li><li><p><strong>设备独立像素</strong></p><p>设备像素也叫密度无关像素，之所以有这样一个概念是因为在我们的生活中出现了很多PPI不同的手机(ipone3GS的PPI:163,iphone4的PPI:326),像素不再是统一的单位,这样会造成一个问题:同样尺寸的图片在不同PPI的手机上显示的大小不一样(尤其是屏幕一样大小的ipone3GS和iphone4)。比如:</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5278429524b9e7f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  大图是在iphone3GS(<strong>PPI:163</strong>)上显示的效果,iphone4(<strong>PPI:326</strong>)上显示的效果,但是用户却是不会关心这些细节的，他们只是希望在不同PPI的屏幕上看到看起来差不多的效果。这时我们就需要一个新的单位,我们希望这个单位能够保证图像内容在不同PPI设备上看上去差不多,这个单位就叫<strong>设备独立像素</strong>,因为这个单位和像素密度无关,因此也叫<strong>密度无关像素</strong>,这个单位在ios设备上叫:pt,在android设备上叫dp。<br>  举例说明就是<strong>iPhone 3G（PPI为163）1dp = 1px，iPhone 4（PPI为326）1dp = 2px</strong>。</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-a2d88ecd8e51a113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  通过上面例子我们不难发现dp同px是有一个对应（比例）关系的，这个对应（比例）关系是操作系统确定并处理，目的是确保不同PPI屏幕所能显示的图像大小是一致的.<br>  那如何获取这个比例呢？</p><pre><code>  // 像素和设备独立像素的一个关系      window.devicePixelRatio</code></pre><ul><li><p><strong>CSS像素</strong></p><p>刚才我们说设备独立像素是一个单位,在android开中用dp这个单位,在ios开发中用pt,那我们在移动web开发中用什么呢？就用css像素也就是px.既然pt和px有一个对应关系,那么设备像素和CSS像素有没有对应关系呢?当然有</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-7f6fa8ce00349135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="视口-viewport"><a href="#视口-viewport" class="headerlink" title="视口(viewport)"></a>视口(viewport)</h4><ul><li><p><strong>定义</strong></p><p>视口是用来约束网站中最顶级块元素(html)的,也就是它决定了html的大小。  </p></li><li><p><strong>视口的作用</strong></p><p>在PC设备上viewport的大小取决于浏览器窗口的大小，以CSS像素做为度量单位。通过以往CSS的知识，我们都能理解html的大小是会影响到我们的网页布局的,而viewport又决定了html的大小，所以viewport间接决定并影响了我们网页的的布局,只不过在PC端viewport的大小和浏览器窗口大小一致，因此我们不去管他,但移动端则不同。</p><p>移动设备屏幕普遍都是比较小的，但是大部分的网站又都是为PC设备来设计的(在移动端处于萌芽时期),要想让移动设备也可以正常显示网页,移动设备不得不做一些处理,如果能让viewport足够大,那么html也会足够大,这样就能保证原本为PC设备设计的网页页能在移动设备上正常显示。移动设备厂商也的确是这样处理的。</p><p>在移动设备上viewport不再受限于浏览器的窗口,而是允许开发人员自由设置viewport的大小,不过浏览器会设置一个默认大小的viewport,为了能够正常显示那些专为PC设计的网页,一般这个值的大小会大于屏幕的尺寸。</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-0846668bea239b89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  从上图中我们可以得知不同的移动厂商分别设置了一个默认的viewport的值,这个值保证了大部分网页可以正常在移动设备下浏览。下面我们通过一个例子来验证上述结论:</p><p>  html代码</p><pre class=" language-base"><code class="language-base">    <div class="box">1</div>    <div class="box">2</div></code></pre><p>  css代码</p><pre class=" language-base"><code class="language-base">      body {          padding: 0;          margin: 0;          background-color: #F7F7F7;      }      .box {          width: 490px;          height: 200px;          text-align: center;          line-height: 200px;          background-color: pink;          float: left;      }</code></pre><p>  经过Iphone6手机在ios10系统下的测试,我们发现网页内容和图片被缩放了,我们也得到了其他开发者的反馈,在部分android手机中也会发生网页内容和图片缩放,而另外一部分android手机会出现滚动条。那产生缩放和滚动条的原因是什么呢？</p><ul><li><p><strong>详解视口</strong></p><p>要明白为什么会产生缩放或滚动条,我们要进一步的学习viewport(视口)。首先,在默认情况下,移动设备上的viewport是大于可视区域的。然后我们认为的把viewport分成layout viewport和ideal viewport。</p><p><strong>视窗布局视口</strong>(layout viewport):网页布局区域的大小(以CSS像素为单位)</p><p><strong>理想视口</strong>(ideal viewport):大小就是设备屏幕区域(以设备独立像素dp、pt为单位)</p><p>理解两个viewport后我们来解释为什么网页会被缩放或出现水平滚动条,其原因在于移动设备浏览器会默认设置一个layout viewport,并且这个值会大于ideal viewport,那么我们也知道ideal viewport就是屏幕区域,layout viewport是我们布局网页的区域,那么最终layout viewport 是要显示在ideal viewport里的,而layout viewport大于ideal viewport时,于是就出现了滚动条,那么为什么有的移动设备网页内容被缩放了呢？因为有些厂商认为将网页完整显示给用户才最合理,而不该出现滚动条,所以就将layout viewport进行了缩放,使其恰好完整显示在ideal viewport(屏幕)里,其缩放比例为ideal viewport/layout viewport。</p></li><li><p><strong>视口设置</strong></p><p>通过刚才分析,我们知道<strong>移动端页面最理想的状态是,避免滚动条且不被默认缩放处理</strong>,那么怎么做呢？就需要设置视口</p><p>基本语法:</p><pre><code>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</code></pre><p> 思想就是设置layout viewport=ideal viewport<br> 设置width=device-width 或initial-scale=1.0其中一个都可以,两个都要写的原因在于两者各有一个小缺陷，就是iphone、ipad以及IE 会横竖屏不分，通通以竖屏的ideal viewport宽度为准。所以，最完美的写法应该是，两者都写上去，这样就 initial-scale=1 解决了 iphone、ipad的毛病，width=device-width则解决了IE的毛病。</p><p>其他设置:</p><p>  width 设置layout viewport 的宽度(带单位)，为一个正整数，或字符串”device-width”</p><p>  height 设置layout viewport的高度(带单位)，这个属性对我们并不重要，很少使用</p><p>  initial-scale 设置页面的初始缩放值(倍数)，为一个数字</p><p>  maximum-scale 允许用户的最大缩放值(倍数)，为一个数字</p><p>  minimum-scale 允许用户的最小缩放值(倍数)，为一个数字</p><p>  user-scalable 否允许用户进行缩放，值为”no”或”yes”, no 代表不允许，yes代表允许</p></li><li><strong>移动端布局方案</strong><ul><li>固定布局 (很早以前其实就用的固定宽度布局的方案,只不过现在已经被废弃了)</li><li>百分比布局 (特别适合于电商网站的布局) 流式布局</li><li>rem布局方案 (用rem这个单位来做不同手机的适配) 现在做手机端页面最好的</li></ul></li><li><strong>移动端浏览器</strong><br> 手机自带浏览器:safari 安卓自带浏览器<br> 第三方浏览器:UC qq浏览器<br> 应用内置浏览器(webview):微信 qq 微博<pre><code>所谓的webview就是ios开发者或者安卓开发者为我们前端提供的一个简易的浏览器移动端开发:    1.类原生app(稍微复杂一点)    2.微信开发:就是把移动端页面扔到了微信的webview中(要做的兼容比较少) hubilder</code></pre><h4 id="京东移动端-jdMobile"><a href="#京东移动端-jdMobile" class="headerlink" title="京东移动端(jdMobile)"></a>京东移动端(jdMobile)</h4></li><li><strong>项目背景</strong><br>现在移动设备越来越多,以致于开发移动端页面的需求旺盛。为了应对诸如京东、淘宝这样的电商网站的开发，因此需要学习这些网站是如何制作的。同时京东移动端也是移动端百分比布局的代表(百分比布局不能适配所有手机)</li><li><p><strong>项目技术点</strong><br>1.百分比<br>2.normalize与reset<br>  reset.css这样的css主要用于清除浏览器的默认样式<br>  normalize.css是一个著名的css库 作用:就是为了解决不同浏览器的兼容性 在以后工作中 用的比较多</p><pre><code>        主要解决的是移动端开发的兼容性问题</code></pre></li><li><p><strong>项目结构</strong><br>jdMobile(项目文件夹)</p><ul><li><p>css(文件夹)—-&gt; 放置css文件</p><ul><li><p>images(文件夹)—-&gt; 放置诸如网站logo,网站小图标这样的长时间不变的图片</p></li><li><p>upload(文件夹)—-&gt; 放置商家、用户上传的图片</p></li><li><p>js(文件夹) —-&gt; 放置js文件(不过本项目不需要,放在这里的目的是让大家清楚)</p></li><li><p>favicon.ico —-&gt;  网页图标</p></li><li><p>index.html —-&gt; 项目首页</p></li></ul></li></ul></li><li><p><strong>项目代码</strong></p><p>基本结构</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;!-- 设置视口 --&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;!--告诉浏览器如果是ie系列且有edge,就用edge这个浏览器的渲染方式去渲染--&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;专业网上购物平台品质保障！-京东商城&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>1.实现布局容器(注释序号的代表了写代码的顺序)</p><pre><code>  &lt;body&gt;    &lt;div class=&quot;jdm&quot;&gt;      &lt;!--1.顶部搜素--&gt;      &lt;!--3.中间滚动内容--&gt;      &lt;!--2.底部工具栏--&gt;    &lt;/div&gt;  &lt;/body&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04_09.移动端事件</title>
      <link href="/2017/11/05/yi-dong-duan/04-09.yi-dong-duan-shi-jian/"/>
      <url>/2017/11/05/yi-dong-duan/04-09.yi-dong-duan-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="移动端事件-touchEvent"><a href="#移动端事件-touchEvent" class="headerlink" title="移动端事件(touchEvent)"></a>移动端事件(touchEvent)</h2><p>  现在随着移动设备的出现,鼠标事件不能够满足多指触控的事件需求,再加上click点击事件在移动端存在延迟,因此在移动端出现了移动端事件也叫TouchEvent.TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等。</p><h4 id="touchEvent类型"><a href="#touchEvent类型" class="headerlink" title="touchEvent类型"></a>touchEvent类型</h4><blockquote><p> touchstart 当用户在触摸平面上放置了一个触点时触发。</p><p> touchend 当一个触点被用户从触摸平面上移除（当用户将一个手指离开触摸平面）时触发。</p><p> touchmove 当用户在触摸平面上移动触点时触发。</p></blockquote><h4 id="touchEvent对象"><a href="#touchEvent对象" class="headerlink" title="touchEvent对象"></a>touchEvent对象</h4><blockquote><p> touches  </p></blockquote><pre><code>代表的是屏幕上总共有几个触点</code></pre><blockquote><p> targetTouches </p></blockquote><pre><code>代表的是绑定事件的元素上有几个触点</code></pre><blockquote><p> changedTouches </p></blockquote><pre><code>相对于上一次状态（进入目标元素、离开目标元素、在目标元素上发生了移动）发生了改变的触摸点的集合(在touchend事件里面 只能通过changedTouches获取离开目标元素的手指)最后有可能有一个离开了屏幕  只会在changedTouches中存在一个触点的数据最后有可能有两个同时离开了屏幕 就会在changedTouches中存在两个触点的数据</code></pre><h4 id="touch对象"><a href="#touch对象" class="headerlink" title="touch对象"></a>touch对象</h4><blockquote><p> clientX/Y (推荐用的)</p></blockquote><pre><code>相对于浏览器可视区域(屏幕)的坐标。想要获取正确的结果必须写全viewport的设置</code></pre><blockquote><p> pageX/Y </p></blockquote><pre><code>相对于页面的坐标(页面有多大 坐标的最大值就有多大 但是想要看到这个结果 必须写全viewport的设置)&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no&quot;&gt;</code></pre><blockquote><p> screenX/Y(不用 因为有兼容性)<br>    相对于屏幕的坐标（谷歌下是相对于屏幕-火狐下是和clientX/Y是一样的）</p></blockquote><h4 id="移动端手势介绍"><a href="#移动端手势介绍" class="headerlink" title="移动端手势介绍"></a>移动端手势介绍</h4><p>  <img src="./images/mobileGesture.jpg" alt=""></p><h4 id="手势封装"><a href="#手势封装" class="headerlink" title="手势封装"></a>手势封装</h4><blockquote><p> tap手势:单击  判断起始点的坐标和终止点的坐标是否一致</p><p> drag手势:拖拽  就是把一个物体从一个地方拖拽到另一个地方  公式:原始位置(left top)+手指移动的距离(x y的差值)</p><p> swipe手势:swipe的功能是为了判断手势的方向</p><p> 触屏轮播图案例</p><p>Click延迟300ms</p></blockquote><pre><code>Click事件在移动手机开发中有300ms的延迟，因为在手机早期，浏览器系统有放大和缩放功能，用户在屏幕上点击两次之后，系统会触发放大或者缩放功能，因此系统做了一个处理，当触摸一次后，在300ms这段时间内有没有触摸第二次，如果触摸了第二次的话，说明是触发放大或缩放功能，否则的话是click事件。因此当click时候，所有用户必须等待于300ms后才会触发click事件。所以当在移动端使用click事件的时候，会感觉到有300ms的迟钝。其实Click延时不是精确的300ms 他是一个习惯性的名称 而是因为用户通过正常的点击 click事件大概在300ms的时候触发(一般情况下 300ms延迟说的是 大概在200-300ms左右)</code></pre><blockquote><p>解决</p></blockquote><pre><code>  1.veiwport设置  2.fastClick插件</code></pre><h4 id="iScroll"><a href="#iScroll" class="headerlink" title="iScroll"></a>iScroll</h4><blockquote><p>下载地址:<a href="https://github.com/cubiq/iscroll" target="_blank" rel="external">https://github.com/cubiq/iscroll</a></p><p>中文文档:<a href="https://iiunknown.gitbooks.io/iscroll-5-api-cn/" target="_blank" rel="external">https://iiunknown.gitbooks.io/iscroll-5-api-cn/</a></p><p>iScroll是什么?</p></blockquote><pre><code>iScroll是一个高性能，资源占用少，无依赖，多平台的javascript滚动插件。</code></pre><blockquote><p>iScroll使用方法</p></blockquote><h4 id="zepto-重点"><a href="#zepto-重点" class="headerlink" title="zepto(重点)"></a>zepto(重点)</h4><blockquote><p>zepto.js</p><p>下载地址:<a href="https://github.com/madrobby/zepto" target="_blank" rel="external">https://github.com/madrobby/zepto</a></p><p>中文文档:<a href="http://www.css88.com/doc/zeptojs_api/" target="_blank" rel="external">http://www.css88.com/doc/zeptojs_api/</a></p><p>zepto是什么?</p></blockquote><pre><code>Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。 如果你会用jquery，那么你也会用zepto。1.zepto比jquery要小2.jquery已经有了大量的用户  选择了和jquery的方法和调用一样的一个库 就是zepto3.zepto完整的压缩完 40k 适应于移动端轻量级的特点4.zepto是分模块的默认的只有5个核心模块 其他的都是按需使用</code></pre><blockquote><p>zepto的模块介绍</p></blockquote><pre><code> 核心模块 5个  总共有17个模块</code></pre><blockquote><p>zetpo使用举例</p><p>zepto定制<br>    默认的zepto只有默认的5个模块<br>    如果想用其他的需要的模块 那么需要定制<br>    步骤:<br>        1.安装node<br>        2.去github下载zepto-master.zip<br>        3.把zepto-master.zip解压 进入有很多文件的文件夹中<br>        4.安装键盘shift 打开命令行窗口<br>        5.输入命令:npm install<br>        6.定制<br>            6.1 找到package.json同级文件中的make文件的41行<br>            6.2 如果你需要什么模块 就把名称添加进入<br>            6.3 执行npm run-scripts dist<br>            6.4 如果有问题 查看zepto中的readme.md</p><h4 id="swipe"><a href="#swipe" class="headerlink" title="swipe"></a>swipe</h4><p>swipe.js</p></blockquote><p>   下载地址:<a href="https://github.com/thebird/Swipe" target="_blank" rel="external">https://github.com/thebird/Swipe</a></p><p>   中文文档:无中文文档 英文文档为github地址</p><blockquote><p>swipe是什么?</p></blockquote><pre><code>swipe是最精准的触摸轮播图插件</code></pre><blockquote><p>swipe使用方法?</p></blockquote><h4 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a>fastclick</h4><blockquote><p>下载地址:<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="external">https://github.com/ftlabs/fastclick</a></p><p>中文文档:无中文文档 英文文档为github地址</p><p>fastclick是什么?</p></blockquote><pre><code>移动端事件会比鼠标事件快大约300ms 还有一个bug 只不过这个bug不去修改</code></pre><p>​    </p><blockquote><p>fastclick使用方法?</p></blockquote><h4 id="Hammer-js"><a href="#Hammer-js" class="headerlink" title="Hammer.js"></a>Hammer.js</h4>]]></content>
      
      
      <categories>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.CSS基础01</title>
      <link href="/2017/11/04/css/css-ji-chu-01/"/>
      <url>/2017/11/04/css/css-ji-chu-01/</url>
      
        <content type="html"><![CDATA[<h1 id="1、CSS介绍"><a href="#1、CSS介绍" class="headerlink" title="1、CSS介绍"></a>1、CSS介绍</h1><h2 id="1-1-什么是CSS？"><a href="#1-1-什么是CSS？" class="headerlink" title="1.1 什么是CSS？"></a>1.1 什么是CSS？</h2><blockquote><p>CSS （Cascading Style Sheets）层叠样式表。<br>层叠：<br>       css的一种特性，后面讲。<br>样式表：<br>       如何描述一个人的外观？<br>             苍老师<br>                    身高:165cm;<br>                    脸型:娃娃脸;<br>                    发色:黑色;<br>                    肤色:白色;<br>                    发型:马尾辫;<br>                     胸围：D<br>        通过一系列属性:值来描述外观或样式，这一系列属性:值被称为样式表。</p><p>##1.2 CSS的使用方式<br>方式一：行内样式，标签的style属性（不推荐使用）<br>       &lt;标签名 style=”样式表属性1:值;样式表属性2:值…”&gt;&lt;/标签名&gt;</p></blockquote><p> 注意：<br>​<br>       → 要能够区分 标签属性       和   样式属性<br>       → 样式表属性和值之间用英文的冒号（:）分割，多个样式属性之间用英文的分号（;）分割。</p><blockquote><p>方式二：内部（内联、内嵌）样式，style标签（学习过程会用）<br>       <style><br>              选择到的元素目标 {<br>                     样式表属性1:值;<br>                    样式表属性2:值<br>                    …<br>             }<br>      </style></p></blockquote><p>注意：</p><pre><code>   → style标签要写在head标签里  → 样式表属性和值之间用英文的冒号（:）分割，多个样式属性之间用英文的分号（;）分割。</code></pre><blockquote><p>方式三：外联样式，link标签：（实际开发用）<br>              <link rel="”stylesheet”" href="”样式文件的路径”"><br>link标签属性：<br>       → rel告诉浏览器该标签所引用的内容是样式表<br>       → href通过路径引入样式表文件</p></blockquote><p>注意：</p><pre><code>   → 要单独建立一个后缀名为.css的样式表文件，文件里的内容格式和方式二中style标签里的内容是一样的。  → link标签要写在head标签里。</code></pre><h1 id="2、-web三层分离"><a href="#2、-web三层分离" class="headerlink" title="2、 web三层分离"></a>2、 web三层分离</h1><blockquote><p>web三层原则：<br>       HTML<br>       CSS<br>       JS</p><ul><li>这三种技术都作用于网页，为了方便网页后期的管理和维护，需要对这三种技术分而治之。</li><li>所谓的分而治之就是把这三种技术分为三种独立的文件来管理（HTML文件、CSS文件、JS文件）<h1 id="3、CSS样式属性"><a href="#3、CSS样式属性" class="headerlink" title="3、CSS样式属性"></a>3、CSS样式属性</h1></li><li>3.1 宽度、高度、背景色</li></ul></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-f157471d4f5bb943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>3.2 字体属性</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-2ab16188d74f8f02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-61b16bf20286f2e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>font属性联写：<br>      font:font-style   font-weight   font-size/line-height  font-family<br>      注意：在font联写时 font-style 、font-weight、line-height这三个属性可以省略。</p><h1 id="4、-CSS基本选择器"><a href="#4、-CSS基本选择器" class="headerlink" title="4、 CSS基本选择器"></a>4、 CSS基本选择器</h1><ul><li>4.1 什么是选择器？<br>选择器：<pre><code> 选择器就是，要对页面上的元素进行样式修饰时，得先找到要修饰的元素。 怎么找？就是通过选择器（选择的方式）来找网页中要修饰的元素。</code></pre>语法格式：<pre><code> 选择器 {        样式属性1:值;       样式属性2:值;       ... }</code></pre></li></ul></blockquote><p>注意：</p><pre><code>   → 选择器和第一个大括号之间要有空格。  → 第二大括号要和选择器的开始垂直方向对齐。   → 样式属性和值要写在大括号里，且在大括号里要有缩进（2个或4个空格）。  →每一组样式属性和值要独占一行，且要加分号。</code></pre><ul><li>4.2 基本选择器（单个选择器）<blockquote><p>通配符选择器：</p><pre><code> 语法： * {              样式属性1:值;              样式属性2:值;               ...        } 作用（特点）：       对页面上所有元素进行样式修饰。</code></pre></blockquote></li></ul><blockquote><p>标签名选择器：<br>       语法：<br>       标签名 {<br>                    样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }<br>作用（特点）：<br>             对页面上和选择器中的标签名一样的所有元素进行样式修饰。</p><p>id选择器：<br>       语法：</p><pre><code>   #id值 {                样式属性1:值;                样式属性2:值;                 ...          }   作用（特点）：         对页面上和选择器中id值一样的单个元素进行修饰。</code></pre></blockquote><p>注意：</p><pre><code>          → 选择器中的id值前要加#号          → id就是标签的一个属性。          → id属性的id值，id值在页面上要唯一，不要重复。           → id 命名规范，可以由数字、字母、下划线组合，不能由数字开头。</code></pre><blockquote><p>class类选择器：<br>       语法：<br>       .类名 {<br>                    样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }<br>       作用（特点）：<br>             对页面上和选择器中class属性值一样的元素进行修饰。</p></blockquote><pre><code>   注意：          → class 是标签中的属性。         → class 属性的值可以有多个，多个值之间要用空格隔开。          → class 属性值可以重复。          → 在选择器中类名之前要加点(.)。           → class命名规范，可以由数字、字母、下划线、中划线组合，不能                    由数字开头。</code></pre><h1 id="5、CSS组合选择器"><a href="#5、CSS组合选择器" class="headerlink" title="5、CSS组合选择器"></a>5、CSS组合选择器</h1><ul><li>5.1 什么是组合选择器？<blockquote><p>组合选择器就是由多个基本选择器组合成的一个复合选择器。</p></blockquote></li><li><p>5.2   组合选择器</p><blockquote><p>子代选择器：</p><pre><code> 语法：       选择器1 &gt;选择器2  {               样式属性1:值;              样式属性2:值;               ...        }</code></pre></blockquote><pre><code>作用（特点）：       对选择器2所选定的元素进行样式修饰，但条件是所选定的元素的父元素必须符合选择器1。</code></pre></li></ul><blockquote><p>后代选择器：<br>       语法：<br>             选择器1  选择器2  {<br>                     样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }</p></blockquote><pre><code>  作用：         对选择器2所选定的元素进行样式修饰，但条件是所选定的元素的父元素或祖先元素必须符合选择器1。</code></pre><blockquote><p>兄弟选择器：<br>       语法：<br>             选择器1+选择器2  {<br>                     样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }</p></blockquote><pre><code>  作用：         对选择器2所选定的元素进行样式修饰，但条件是所选定的元素的上一个兄弟元素必须符合选择器1。</code></pre><blockquote><p>交集选择器：<br>       语法：<br>             选择器1选择器2  {<br>                     样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }</p></blockquote><pre><code>  作用：         对选择器2所选定的元素进行样式修饰，但条件是所选定的元素同时必须符合选择器1。   注意：          → 选择器1通常是标签选择器或类选择器。          → 选择器2通常是类选择器。</code></pre><blockquote><p>并集选择器：<br>       语法：<br>             选择器1,选择器2 {<br>                     样式属性1:值;<br>                    样式属性2:值;<br>                     …<br>              }<br>       作用：<br>             对于符合选择器1或符合选择器2的元素进行样式修饰。</p></blockquote><h1 id="6、CSS伪类选择器"><a href="#6、CSS伪类选择器" class="headerlink" title="6、CSS伪类选择器"></a>6、CSS伪类选择器</h1><ul><li><p>6.1 锚伪类</p><blockquote><p>什么是锚伪类？</p><pre><code> 和a标签相关的伪类选择器。</code></pre><p>:link</p><pre><code> 作用：给超链接没有被访问前修饰的样式。</code></pre><p>语法：</p><pre><code>a:link {        样式属性1:值;       样式属性2:值;        ... }</code></pre><p>注意：</p><pre><code>仅仅对a标签有作用。</code></pre><p>:visited</p><pre><code> 作用：给超链接被访问后修饰的样式。</code></pre><p>语法：</p><pre><code>a:visited {        样式属性1:值;       样式属性2:值;</code></pre><p>…</p><pre><code> }</code></pre><p>注意：</p><pre><code>仅仅对a标签有作用。</code></pre><p>:hover</p><pre><code> 作用：鼠标悬停在元素上时修饰的样式</code></pre><p>语法：</p><pre><code>a:hover {        样式属性1:值;       样式属性2:值;        ... }</code></pre><p>注意：</p><pre><code>→ 对所有标签有效果。→ 针对超链接，:hover必须放在:link和:visited之后。</code></pre><p>:active</p><pre><code> 作用：对元素鼠标键按下不弹起时所修饰的样式。</code></pre><p>语法：</p><pre><code>a:active {        样式属性1:值;       样式属性2:值;        ... }</code></pre><p>注意：</p><pre><code>→ 对所有标签有效果。→ 针对超链接，:active必须放在:hover之后。</code></pre></blockquote></li><li><p>6.2 input输入框伪类</p><blockquote><p>:focus<br>  作用：input输入框获取焦点时要修饰的样式。<br>语法：</p><pre><code> input:focus {        样式属性1:值;       样式属性2:值;       ... }</code></pre><h1 id="7、CSS样式表中的注释"><a href="#7、CSS样式表中的注释" class="headerlink" title="7、CSS样式表中的注释"></a>7、CSS样式表中的注释</h1><p>/<em> 注释的内容 </em>/<br>注意： 注释不能嵌套</p></blockquote></li></ul><h1 id="8、元素的显示模式"><a href="#8、元素的显示模式" class="headerlink" title="8、元素的显示模式"></a>8、元素的显示模式</h1><blockquote><p>模式一：块级元素<br>特点：<br>      → 独占一行<br>      → 可设置宽高<br>默认是块级元素的标签有：<br>      h1-h6、p、div、ul、ol、li、dl、dt、dd<br>通过样式属性将一个元素设为块级元素：<br>      display:block;<br>模式二：行内元素<br>特点：<br>      → 不独占一行<br>      → 不能设置宽高，宽高由内容决定。<br>默认的是行内元素的标签有：<br>        a、span<br>通过样式属性将一个元素设为行内元素：<br>       display:inline;<br>模式三：行内块级元素<br>特点：<br>       → 不独占一行 （行内元素的特点）<br>      → 可设置宽高 （块级元素的特点）<br>默认的是行内块级元素的标签有：<br>      img,input,select,textarea<br>通过样式属性将一个元素设为行内块级元素：<br>      display:inline-block</p></blockquote><h1 id="9、颜色"><a href="#9、颜色" class="headerlink" title="9、颜色"></a>9、颜色</h1><blockquote><p>颜色表示方式：<br>       方式一：颜色名称<br>              如：red、blue、green<br>       方式二：十六进制   （应用比较多）<br>               0 1 2 3 4 5 6 7 8 9 A B C D E F<br>              如：#FFB6C1  六个 或 三个</p><pre><code>          #ffbbcc → #fbc  （字母大小写一样）   方式三：rgb             red、green、blue 三种颜色调和，每个颜色等级范围是0-255          如：rgb(255,0,0)   方式四：rgba          red、green、blue 三种颜色调和，每个颜色等级范围是0-255           a是透明度alpha 透明度的等级是0-1，可包含小数。          如：rgba(0,0,0,0.5);    或  rgba(0,0,0,.5);          注意：最后一个数值是小数时,可以省略.前面的0</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.CSS基础02</title>
      <link href="/2017/11/04/css/css-ji-chu-02/"/>
      <url>/2017/11/04/css/css-ji-chu-02/</url>
      
        <content type="html"><![CDATA[<h1 id="1、CSS文本样式属性"><a href="#1、CSS文本样式属性" class="headerlink" title="1、CSS文本样式属性"></a>1、CSS文本样式属性</h1><blockquote><p>text-align：<br>       作用：规定文本的水平对齐方式。<br>       语法：<br>              text-align:left;    向左对齐  默认的<br>       text-align:right;   向右对齐<br>              text-align:center;  中心对齐<br>       注意：<br>             → 对齐时，要以选择器所代表的元素的宽度为参考。<br>             → 图片、表单元素、行级元素都可以看成文本。</p><p>text-indent：<br>作用：文本首行缩进。<br>语法：如：<br>              text-indent:20px;    向右缩进<br>              text-index:-20px;     向左缩进<br>    值的单位：可以使em   1个em代表缩进一个文字的距离<br>              如：text-indent:2em;</p><p>text-decoration:<br>  作用：规定添加到文本的水平线<br>  语法：<br>              text-decoration:none;              没有水平线的文本<br>              text-decoration:underline;       在文本下添加一条线<br>              text-decoration:overline;         在文本上添加一条线<br>              text-decoration:line-through; 穿过文本的一条线</p><h1 id="2、CSS的背景样式属性"><a href="#2、CSS的背景样式属性" class="headerlink" title="2、CSS的背景样式属性"></a>2、CSS的背景样式属性</h1><p>background-color:<br>作用：设置元素的背景色<br>语法：<br>              background-color:颜色值;<br>background-image:<br>作用：设置元素的背景图<br>语法：<br>              background-image:url(图片路径);<br>案例：英雄联盟<br>background-repeat:<br>作用：设定背景图是否重复和如何重复<br>语法：<br>              background-repeat:repeat; 水平和垂直方向都重复，默认<br>              background-repeat:no-repeat; 背景图像仅仅显示一次<br>              background-repeat:repeat-x;   仅水平方向重复<br>              background-repeat:repeat-y;   仅垂直方向重复<br>案例：渐变背景<br>background-position:<br> 作用：设置背景图像的起始位置<br> 语法：<br>       background-position:水平方向值  垂直方向值;<br> 水平方向值：<br>   方位名词：left   center  right;<br><img src="http://upload-images.jianshu.io/upload_images/5006978-dede4e25cedd3fea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>垂直方向值：<br>方位名词：top          center   bottom<br><img src="http://upload-images.jianshu.io/upload_images/5006978-a87057402bae4fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-ec1ea0fb2290fb45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>background-attachment:<br>作用：<br>       设置背景图像是否固定或者随着页面的其余部分滚动。<br>语法：<br>       background-attachment:scroll;  滑动  默认<br>       background-attachment:fixed;   固定<br>背景属性联写：background<br>联写语法：<br>  background:颜色 背景图  是否重复和如何重复  滚动或固定 x位置  y位置<br>注意：<br>  需要什么就写什么，某些属性不写，也不会影响其他背景属性值</p></blockquote><h1 id="3、CSS三大特性"><a href="#3、CSS三大特性" class="headerlink" title="3、CSS三大特性"></a>3、CSS三大特性</h1><blockquote><p>继承性：<br>概念：一个元素可以继承其父元素或祖先元素的样式。（子承父业）<br>哪些属性可以别继承？<br>       text-、font-、line-、color<br>注意：<br>        → a标签不能继承颜色color和text-decor。必须在a标签本身设定颜色<br>        → h标签不能被继承字体大小font-size。必须在h标签上设定字体大小。<br><img src="http://upload-images.jianshu.io/upload_images/5006978-60524a36a8554b79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>层叠性：<br>   作用：是浏览器处理冲突的一个能力。<br>   概念：<br>      如果一个属性通过两个选择器设置到同一个元素上面，那么这个时候<br>      一个属性就会将另一个属性层叠掉。<br>      如果多个不相同的属性通过两个选择器设置到一个元素上面，那么不<br>      会发生层叠。<br>优先级：<br>继承&lt;通配符&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内style&lt;!important<br>!important ：<br>作用：<br>              可以使指定选择器里的某一个样式属性达到最优先。<br>注意：<br>       !important 虽然可以使我们的指定属性值达到最优先，但是在继承的样式属性同非继承的样式属性比较优先级时，继承的样式属性的优先级时最小的。<br>权重：<br>概念：优先级算法，层叠的规则。<br>作用：多个选择器组合以后的优先级。<br>算法：<br>       （0，0，0，0）==》第一个0对应的是!important的个数，第二个0对<br>       应的是id选择器的个数，第三个0对应的类选择器的个数，第四个0对<br>       应的是标签选择器的个数，就是当前选择器的权重。<br>比较：<br>       先从第一个0开始比较，如果第一个0大，那么说明这个选择器的权重<br>       高，如果第一个相同，比较第二个，依次类推。<br>              对于修饰的元素的样式属性，有两种情况，继承 和 非继承。<br>              非继承 要优先于 继承。<br>              若权重 一样（就近原则）<br>注意：选择器在查找元素的时候不是从左往右找，而是从右往左找。<br><img src="http://upload-images.jianshu.io/upload_images/5006978-d8b9b50cf1349213.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="4、补充行高"><a href="#4、补充行高" class="headerlink" title="4、补充行高"></a>4、补充行高</h1></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-263c44312fc48071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>行高的概念：<br>行高就是 文字的上间距 + 文字 + 文字的下间距。<br>注意：文字的上间距 和 文字的下间距是相等的<br>行高的作用：<br>可以同过设置文字行高（line-height）等于元素的高度(height)，使文字在元素中垂直居中。<br>行高中的单位：<br> px<br>       像素<br> em<br>   和文字大小相关<br>   如：font-size:16px;  line-height:2em;<br>       2em 就是两个font-size的大小   32px<br> %<br>   和em一样</p><p>浏览器默认文字的大小是16px<br>行高在不同浏览器下，甚至在不同系统的不同浏览器下，行高是不一致</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.CSS基础04</title>
      <link href="/2017/11/04/css/css-ji-chu-04/"/>
      <url>/2017/11/04/css/css-ji-chu-04/</url>
      
        <content type="html"><![CDATA[<h1 id="1、浮动"><a href="#1、浮动" class="headerlink" title="1、浮动"></a>1、浮动</h1><ul><li><p>1.1 什么是浮动？</p><blockquote><p>浮动，使一个盒子移动到父元素的最左边或者最右边的技术。<br>向左浮动：float: left;<br>向右浮动：float: right;</p></blockquote></li><li><p>1.2 浮动的特点</p><ul><li>脱离标签流【向上飞起】</li><li>原位置丢失，后面的元素补位  </li><li>浮动到父元素的最左或者最右</li><li>当有多个元素浮动时，连续向一个方向浮动的元素一个紧挨着一个跟在后面</li></ul></li><li><p>1.3 浮动的应用</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-d470cb8dc44a2fee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-2311d006a52e4c2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-22e13689cb4543bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-b5bbdf34727a357b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="2、清除浮动"><a href="#2、清除浮动" class="headerlink" title="2、清除浮动"></a>2、清除浮动</h1><blockquote><p>当一个元素浮动时，后面的元素就会受其浮动的影响向前补位，如果不希望后面的元素受影响可以使用clear属性清除前面元素浮动对其的影响。<br>clear：left;   /<em> 清除左浮动的影响 </em>/<br>clear：right;  /<em> 清除右浮动的影响 </em>/<br>clear：both;  /<em> 清除左右浮动的影响 </em>/</p><p>外层元素收缩的解决办法<br>当一个盒子里所有的元素都浮动起来之后，这个盒子就会收缩，显示出我们不希望要的效果：<br>浮动前：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-6d775eb1dfda174d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>浮动后，外层元素收缩：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-ccc6d9477176bf65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>原因：因为盒子里面所有元素都脱离了标准流，结果盒子里面变成“空”的了，所以就收缩了。<br>解决办法有很多种：</p></blockquote><pre><code>1. 设置明确的高2. 设置父元素overflow: hidden;3. 添加额外元素法</code></pre><blockquote><p> 在盒子最后添加一个空的高度为0的div并设置其清除左右浮动：<br>   <div style="”clear:" both”=""></div></p><ol><li>使用:after伪类<br>定义CSS类：<br>.clearfix:after {content:”\200B”; display:block; height:0; clear:both; }<br>.clearfix { <em>zoom:1; } /</em> 解决IE6下不好使的问题 */<br>为父元素增加类：<br><div class="”clearfix”">…</div><h1 id="3、盒子宽、高的计算方式"><a href="#3、盒子宽、高的计算方式" class="headerlink" title="3、盒子宽、高的计算方式"></a>3、盒子宽、高的计算方式</h1>box-sizing：盒子如何计算宽、高。<br>box-sizing: content-box;【默认】：宽=width+左内边距+右内边距+左边框+右边框<br>box-sizing: border-box; 宽=width   高=height<br>这个属性在IE6，7中不能使用，在firefox2.0~28需要添加-moz-前缀，chrome4.0~9.0需要添加-webkit-前缀：</li></ol></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-62366f72bedc16f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.CSS基础03</title>
      <link href="/2017/11/04/css/css-ji-chu-03/"/>
      <url>/2017/11/04/css/css-ji-chu-03/</url>
      
        <content type="html"><![CDATA[<h1 id="1、盒子模型"><a href="#1、盒子模型" class="headerlink" title="1、盒子模型"></a>1、盒子模型</h1><ul><li>1.1 生活中的盒子</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-35f99e17dde60c4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-fe5d2837947799b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>生活中的盒子模型：<br>      → 盒子的边框的厚度，外壳。<br>      → 盒子中的填充物，泡沫。<br>       → 盒子中的内容，手机。<br>       → 盒子与盒子之间的距离。</p></blockquote><ul><li>1.2 CSS中的盒子模型</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-56b67d60db32157a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5e9482b0f996af90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>在web中，我们在body里所放到任何元素都可以看成一个盒子，所以在网页中“万物皆是盒子”。<br>CSS中的盒子模型：<br>      → 元素（盒子）的边框，border。相当于生活中盒子的外壳的厚度。<br>       → 元素（盒子）的内边距，padding。 相当于生活盒子里的泡沫。<br>      → 元素（盒子）的内容区域width、height值。相当于生活中盒子里中的手机。<br>       → 元素（盒子）的外边距margin。相当生活中盒子与盒子之间的距离</p></blockquote><h1 id="2、CSS-盒子模型中的边框（border）"><a href="#2、CSS-盒子模型中的边框（border）" class="headerlink" title="2、CSS 盒子模型中的边框（border）"></a>2、CSS 盒子模型中的边框（border）</h1><blockquote><p>border样式属性：<br>  作用：设置盒子的边框相关样式<br>         border-width：边框的厚度或大小<br>                            如：border-width:1px;<br>  border-style：边框的类型<br>                            如：border-style:值;<br>                                   none      无边框 默认<br>                                   solid  实线<br>                                  dotted 点状边框<br>                                  dashed 虚线<br>                                   double 双边框<br>                             …<br>         border-color：边框的颜色<br>                            如：border-color:red;<br>                            若不设置边框的颜色，默认为黑色。<br>         联写：<br>                      border:边框的大小 边框的类型 边框的颜色;<br>                如：border:1px solid blue;</p><p>盒子的四个边框：<br>      边框的方向：top上、right右、bottom下、left左<br>       单个方向设置：<br>              border-方向:边框厚度  边框的类型  边框的颜色。<br>              如：border-top:10px  solid  red;</p></blockquote><p>注意：</p><pre><code>  →   一般情况下，边框会影响盒子的大小。  → 默认情况下，针对块级元素，若不设置width时，该块级元素的width等于它父元素的width。          对于子元素，增加边框时，该元素的width会自动改变适应父元素的区域。</code></pre><blockquote><p>表格边框合并：<br>              border-collapse:collapse</p></blockquote><h1 id="3、CSS盒子模型中的内边距（padding）"><a href="#3、CSS盒子模型中的内边距（padding）" class="headerlink" title="3、CSS盒子模型中的内边距（padding）"></a>3、CSS盒子模型中的内边距（padding）</h1><blockquote><p>内边距会影响盒子的大小！因为会把盒子撑大，<br>因为整体的宽=width+左右的内边距<br>整体的高：height+上下边距<br>如果不想计算，可以直接用一个属性：border-sizing:borer-box;<br>border-sizing: border-box;<br>/<em>但是弊端是有很多浏览器不支持</em>/<br>-moz-border-sizing: border-box;<br>-webkit-border-sizing: border-box;<br>/<em>为避免不必要的麻烦，直接以上代码全部敲</em>/</p><p>用webstorm的话，输入bx+table就行<br>padding样式属性：<br>      作用：设置盒子中的内边距<br>       语法：<br>                     padding:数值;<br>                     如：padding:20px;<br>注意：<br>       → 一般情况下，边框会影响盒子的大小。<br>              → 默认情况下，针对块级元素，若不设置width时，该块级元素的width等于它父元素的width。<br>              对于子元素，增加内边距时，该元素的width会自动改变适应父元素的区域。<br>当一个盒子设置了背景图片logo后，盒子里面的文字默认是压在图片上面的，如果想显示出logo，可以考虑用padding解决问题。<br>盒子的四个内边距：<br>      内边距的方向：top上、right右、bottom下、left左<br>      语法：<br>         padding-方向:值;<br>               如：padding-left:20px;<br>       联写：<br>                padding:值1<br>                     值1:（上、右、下、左）<br>              如:  padding:10px;</p></blockquote><pre><code>     padding:值1 值2;                        值1（上、下）                 值2（左、右）          如:  padding:10px  20px;            padding:值1 值2 值3;                        值1（上）                        值2（左、右）                        值3（下）          如:  padding:10px  20px  10px;            padding:值1 值2 值3 值4；                        值1（上）                        值2（右）                        值3（下）                        值4（左）                        如： padding:10px  20px  10px  20px;</code></pre><blockquote><p>注意：<br>              针对行级元素，在设定其padding值时，在IE浏览器低版本中（IE8以下），padding的上下没有效果。</p><h1 id="4、盒子的总大小"><a href="#4、盒子的总大小" class="headerlink" title="4、盒子的总大小"></a>4、盒子的总大小</h1><p>盒子的大小：<br>       盒子的总宽度：内容区域width + 左右内边距padding + 左右边框border<br>       盒子的总高度：内容区域height + 上下内边距padding + 上下边框border</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-2e40e5d6cc821299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="5、盒子的外边距margin"><a href="#5、盒子的外边距margin" class="headerlink" title="5、盒子的外边距margin"></a>5、盒子的外边距margin</h1><blockquote><p>margin样式属性：<br>      作用：设置盒子与其他盒子之间的距离。<br>       语法：<br>                     margin:数值;<br>                     如：margin:20px;<br>注意：<br>       → margin的改变不会影响盒子的大小。</p><p>盒子的四个外边距：<br>      外边距的方向：top上、right右、bottom下、left左<br>      语法：<br>         margin-方向:值;<br>               如：margin-left:20px;<br>       联写：<br>                margin:值1<br>                     值1:（上、右、下、左）<br>              如:  margin:10px;</p></blockquote><pre><code>     margin:值1 值2;                        值1（上、下）                 值2（左、右）          如:  margin:10px  20px;            margin:值1 值2 值3;                        值1（上）                        值2（左、右）                        值3（下）          如:  margin:10px  20px  10px;            margin:值1 值2 值3 值4；                        值1（上）                        值2（右）                        值3（下）                        值4（左）                        如： margin:10px  20px  10px  20px;</code></pre><blockquote><p>盒子水平居中：<br>              margin:0px  auto;<br>注意：盒子必须是块级元素，且宽度必须确定。<br>margin的特殊情况一：<br>              针对行内元素，margin的上下没有效果。</p><p>margin的特殊情况二：<br>             对于一个父元素里所嵌套的子元素。若父元素没有上边框没有上内边距，设置子元素的margin-top值时，margin-top对子元素无效，并且父元素会受到影响。 解决办法就是给父元素加个上边框或上内边距。<br>              这种情况，我们在实际开发中，一般不会选择用子元素margin-top，而会用父元素的padding-top来实现。</p><p>margin的特殊情况三（margin合并或塌陷问题）：<br>              对于两个同级的盒子，一个在上一个在下。若上面的盒子margin-bottom与下面的盒子margin-top一起作用时。这时，上下两个盒子的间距会选择margin-bottom 与 margin-top中最大的值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.CSS基础05</title>
      <link href="/2017/11/04/css/css-ji-chu-05/"/>
      <url>/2017/11/04/css/css-ji-chu-05/</url>
      
        <content type="html"><![CDATA[<h1 id="1、定位"><a href="#1、定位" class="headerlink" title="1、定位"></a>1、定位</h1><blockquote><p>定位，可以把盒子摆放到页面中任意位置的技术。<br>标签流：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-938dc9f974400c23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>浮动:<br><img src="http://upload-images.jianshu.io/upload_images/5006978-4cac73d592ec7423.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>定位：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-5d919d4db4ee4f5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h2 id="1-2-定位的分类"><a href="#1-2-定位的分类" class="headerlink" title="1.2 定位的分类"></a>1.2 定位的分类</h2><blockquote><p>静态定位【static】：默认的标准流定位方式。<br>绝对定位【absolute】：相对于浏览器边缘定位。<br>相对定位【relative】：相对于原来的位置定位。<br>固定定位【fixed】：相对于浏览器边缘定位，不随滚动条移动。</p></blockquote><h2 id="1-3-绝对定位"><a href="#1-3-绝对定位" class="headerlink" title="1.3 绝对定位"></a>1.3 绝对定位</h2><blockquote><p>绝对定位：可以把一个盒子放在页面中任何一个位置，相对于“浏览器边缘”定位<br>属性：position: absolute;<br>特点：</p><ul><li>脱离标准流【飞起来】</li><li>原位置丢失，后面元素补位</li><li>随滚动条滚动<br>相对于“浏览器边缘”定位：<pre><code>   水平移动：             left：离浏览器最左边的距离             right：离浏览器最右边的距离   垂直移动：             top：离浏览器最上边的距离             bottom：离浏览器最下边的距离</code></pre><h2 id="1-4-相对定位"><a href="#1-4-相对定位" class="headerlink" title="1.4 相对定位"></a>1.4 相对定位</h2>对定位：可以把一个盒子放在页面中任何一个位置，相对于“原位置”定位原位置：未定位之前所在的位置<br>特点：</li></ul><ol><li>脱离标准流【飞起来】</li><li>原位置保留</li><li>随滚动条滚动<br>属性：position: relative;<br>坐标表示位置：<pre><code>  水平移动：            left：离原位置左边的距离            right：离原位置右边的距离  垂直移动：            top：离原位置上边的距离k            bottom：离原位置下边的距离</code></pre><h2 id="1-5-固定定位"><a href="#1-5-固定定位" class="headerlink" title="1.5 固定定位"></a>1.5 固定定位</h2>固定定位：可以把一个盒子放在页面中任何一个位置，相对于“浏览器边缘”定位<br>特点：不会随着滚动条滚动<br>属性：position: absolute;<br>坐标表示位置：<pre><code>  水平移动：            left：离浏览器最左边的距离            right：离浏览器最右边的距离  垂直移动：            top：离浏览器最上边的距离            bottom：离浏览器最下边的距离</code></pre>特点：</li><li>脱离标准流【飞起来】</li><li>原位置丢失，后面元素补位</li><li>不会随滚动条滚动<h2 id="1-6-元素层级"><a href="#1-6-元素层级" class="headerlink" title="1.6 元素层级"></a>1.6 元素层级</h2>当多个元素互相覆盖时，它们之间的层级关系是：定位层&gt;浮动层&gt;标准流层<br>这个层级是固定的不能改变。</li></ol></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-504ef6a70bd1f5d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="1-7-z-index"><a href="#1-7-z-index" class="headerlink" title="1.7 z-index"></a>1.7 z-index</h2><blockquote><p>当定位的元素相互重叠时，可以通过z-index属性修改定位元素的上下级关系，值大的在上面。<br>注意：只对定位的元素有效。<br>如果多个元素被定位到同一个位置，那么默认情况下，在后面的盒子覆盖前面的盒子。</p></blockquote><h2 id="1-8-绝对变相对"><a href="#1-8-绝对变相对" class="headerlink" title="1.8 绝对变相对"></a>1.8 绝对变相对</h2><blockquote><p>一个绝对定位的元素是相对于浏览器边缘定位的，但是，当这个元素的上级元素中有一个元素是非静态定位的，那么这个元素会相对于这个上级元素定位。<br>“一个元素相对于父级元素定位”.</p></blockquote><h1 id="2、页面布局"><a href="#2、页面布局" class="headerlink" title="2、页面布局"></a>2、页面布局</h1><blockquote><h2 id="2-1-横向布局-：-inline-block-vs-float"><a href="#2-1-横向布局-：-inline-block-vs-float" class="headerlink" title="2.1 横向布局 ： inline-block vs float"></a>2.1 横向布局 ： inline-block vs float</h2><p>inline-block<br>问题：代码中的空格会显示在页面中，大小由字体和字尺寸决定<br>解决办法：<br>代码中去掉空格<br>代码中的空格变成注释<br>margin负值</p><p>float<br>问题：父元素会收缩<br>解决办法：为父元素添加clearfix类</p><h2 id="2-2-垂直对齐"><a href="#2-2-垂直对齐" class="headerlink" title="2.2 垂直对齐"></a>2.2 垂直对齐</h2><p>我们可以设置height等于line-height设置盒子内元素垂直居中对齐，但要注意几下几点：</p><ul><li>图片默认是以基线居中，设置图片的vertical-align: middle才可以实现中线居中</li><li>非行级元素会继承line-height【框拉长】</li><li>浮动的元素不受外层line-height的垂直居中影响【不能靠上级实现垂直居中，但通过本身的行高可以实现】</li><li>设置vertical-align:middle时，非图片的inline-block的元素会向下移动<br>解决办法：设置行高小一些</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础</title>
      <link href="/2017/11/03/html/html-ji-chu/"/>
      <url>/2017/11/03/html/html-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-前端介绍"><a href="#一、-前端介绍" class="headerlink" title="一、 前端介绍"></a>一、 前端介绍</h1><ul><li><h2 id="1-1-什么是前端？"><a href="#1-1-什么是前端？" class="headerlink" title="1.1 什么是前端？"></a>1.1 什么是前端？</h2><blockquote><p>前端就是提供给用户操作的界面。</p><pre><code> 前端开发就是创造界面的过程。</code></pre></blockquote></li><li><h2 id="1-2-前端开发方向"><a href="#1-2-前端开发方向" class="headerlink" title="1.2 前端开发方向"></a>1.2 前端开发方向</h2><blockquote><p>前端开发工程师：</p><pre><code>        → PC Web、 移动 Web、 混合app </code></pre><p>后端开发工程师：</p><pre><code>        → Java、PHP、.NET、Node</code></pre><p>全栈开发工程师：</p><pre><code>        → 前后端都会。</code></pre></blockquote></li><li><h2 id="1-3-前端的“钱”景"><a href="#1-3-前端的“钱”景" class="headerlink" title="1.3 前端的“钱”景"></a>1.3 前端的“钱”景</h2><p><img src="http://upload-images.jianshu.io/upload_images/5006978-44b9874dfcb68950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><h2 id="1-4-技术方向"><a href="#1-4-技术方向" class="headerlink" title="1.4 技术方向"></a>1.4 技术方向</h2><blockquote><p>HTML</p><pre><code>        → 用来描述网页结构和内容。相当于描述人的身体结构和五脏六腑</code></pre></blockquote></li></ul><blockquote><p>CSS<br>              → 用来美化网页。相当于人穿衣服化妆一样。</p><p>JS<br>       → 用来实现网页动态效果。相当于人有一些有趣的行为一样</p></blockquote><ul><li><h2 id="1-5-快捷键"><a href="#1-5-快捷键" class="headerlink" title="1.5 快捷键"></a>1.5 快捷键</h2><blockquote><p>Ctrl+C:复制                Ctrl+V:粘贴<br>Ctrl+X:剪切                Ctrl+S:保存<br>Ctrl+A:全选<br>Ctrl+Z:撤销上一个操作   CTRL＋Y：还原上一个操作<br>Alt+tab:切换程序(注意整个操作过程alt常按)<br>Win+D(鼠标点击屏幕的右下角)：切换到桌面<br>Win+R：快速运行，打开软件，cmd命令行等<br>  mspaint:运行画图工具<br>  notepad:运行记事本<br>  calc：计算器<br>  osk：虚拟键盘<br>Win+L:锁屏                F5:刷新<br>Alt +f4:退出程序</p></blockquote></li></ul><h1 id="2、-认识浏览器"><a href="#2、-认识浏览器" class="headerlink" title="2、 认识浏览器"></a>2、 认识浏览器</h1><p><img src="http://upload-images.jianshu.io/upload_images/5006978-83f28111388e9766.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p> 什么是浏览器：<br>              → 就是用来浏览器网页的工具或软件</p><p> 浏览器的种类：<br>              → IE浏览器、谷歌浏览器、火狐浏览器、苹果浏览器、欧朋浏览器…</p><p> 浏览器内核：<br>              → 内核（Rendering Engine）：可大概译为“渲染引擎”，不过我们一般习惯将之称为“浏览器内核”。负责对网页语法的解释（如标准通用标记语言下的一个应用HTML、JavaScript）并渲染（显示）网页。<br>              网页对普通用户来说就是一个可操作的界面，但对于我们开发者或浏览器而言，网页就是代码。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-ba921222cf4d3a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>浏览器内核就相当于一个“翻译官”，将我们的所写的代码翻译成一个可视化的界面。<br>内核的分类：<br>       → Trident：ie , 猎豹安全浏览器,360极速浏览器,百度浏览器…<br>       → Gecko：Firefox<br>       → Webkit：Safari<br>       → Blink：Chrome，Opera<br>       不同的内核在渲染同一内容的时候会有差别。</p></blockquote><h1 id="3、认识服务器"><a href="#3、认识服务器" class="headerlink" title="3、认识服务器"></a>3、认识服务器</h1><blockquote><p>什么是服务器？<br>       服务器，简单理解就是一个配置比较高的，需要一天24小时运行的超级电脑。<br>       我们将来所开发好的项目或网站都要部署在服务器上，接入互联网，被全世界访问。</p></blockquote><h1 id="4、HTML"><a href="#4、HTML" class="headerlink" title="4、HTML"></a>4、HTML</h1><ul><li><h2 id="4-1-什么是HTML"><a href="#4-1-什么是HTML" class="headerlink" title="4.1 什么是HTML?"></a>4.1 什么是HTML?</h2><blockquote><p>HTML (Hyper Text Markup Language),超文本标记语言</p><pre><code> → 超文本              就是比普通的文本要牛！ 就好像超人 与 普通人一样。 → 标记              也被称为“标签”，超文本之所以比普通文本牛，就是因为有特殊的标记。 → 语言        沟通方式，和浏览器说话用的语言。</code></pre></blockquote></li></ul><blockquote><p>所以，超文本标记语言就是通过一些特殊的标记告诉网页中应当显示什么。</p><p>作用：<br>              用来描述网页结构和内容。相当于描述人的身体结构和五脏六腑</p></blockquote><ul><li><h2 id="4-2-HTML的标准和主流版本"><a href="#4-2-HTML的标准和主流版本" class="headerlink" title="4.2 HTML的标准和主流版本"></a>4.2 HTML的标准和主流版本</h2><blockquote><p>W3C（World Wide Web Consortium）</p><pre><code>        → 万维网联盟，万维网联盟创建于1994年，是Web技术领域最具权威和影响力的国际中立性技术标准机构。        → 制定了HTML的标准。        → 提供了工具书（手册）</code></pre></blockquote></li></ul><blockquote><p>HTML主流版本：<br>       → HTML4.01<br>       → XHTML1.0<br>       → HTML 5.0  推荐使用的版本</p></blockquote><p>网页构架<br><img src="http://upload-images.jianshu.io/upload_images/5006978-88391b9765030ccf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-bfa83fe2dcb5e0d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注意：<br>→ 将来在使用DOCTYPE的时候建议使用html5的类型。每个页面都要设置一个doctype，如果不设置，浏览器会默认开启quirks mode（怪异模式）解析（quirks mode（怪异模式）是浏览器为了兼容很早之前针对旧版本浏览器设计、并未严格遵循 W3C 标准的网页而产生的一种页面渲染模式）<br>→ 在主体中所看的内容，都要写在body标签中</p></blockquote><h2 id="5、开发工具"><a href="#5、开发工具" class="headerlink" title="5、开发工具"></a>5、开发工具</h2><p>我常用的开发工具就是如下图标：<br>微软的 <a href="https://code.visualstudio.com/" target="_blank" rel="external">visual studio code</a> 以及 <a href="http://www.jetbrains.com/webstorm/" target="_blank" rel="external">Webstorm</a><br><img src="http://upload-images.jianshu.io/upload_images/5006978-fa788f3782c49da3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>vscode( visual studio code 简称) 是目前打开速度比较快的编辑器，建议使用。插件推荐使用如下：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-2c3bf6e24e4ec1cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-b800de8aa5b7223d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-58ea5cae6c22a8c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-9bcf2cc83bbe238a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-f52ac07c451002c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-4dcc0505ad55ba6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-4e78842387de1562.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-447c0400f8b01946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="6、HTML标签"><a href="#6、HTML标签" class="headerlink" title="6、HTML标签"></a>6、HTML标签</h2><blockquote><p>h标签：<br>       作用：表示一个标题<br>       语法：h1到h6分六个等级<br>       </p><h1>标题</h1><br>       <h2>标题</h2><br>              …<br>              <h6>标题</h6><br>语义（含义）：标题<br>       特点：独占一行，上下有默认间距。<p></p><p>p标签：<br>       作用：表示一个段落。<br>       语法：<br>                     </p><p>段落</p><br>       语义：段落<br>       特点：独占一行，上下有默认间距<p></p><p>title标签：<br>       作用：表示网页的名称<br>       语法：<br>              <title>网页的名称</title><br>       语义：网页名称<br>       特点：写在head标签里。</p><p>br标签：<br>       作用：实现换行<br>       语法：<br>                     &lt; br &gt;</p><p>hr标签：<br>       作用：表示一条水平线<br>       语法：<br>                     &lt; hr &gt;</p><p>meta标签：<br>       作用：用作网页配置<br>       语法：<br>                     <meta><br>       meta标签属性：<br>                     charset,表示字符集，将来会告诉浏览器在解析网页中的内容时，按照哪种编码解析，具体按照哪种编码由等号后面的值决定。<br>              如：<meta charset="utf-8"><br>       特点：写在head标签里且写在最上面。<br>注意：<br>              创建好的文件以及文件中的内容会按指定的编码格式转换成二进制（0和1）存放到硬盘里。读取时，也会按照之前保存到硬盘里的编码格式把二进制转换成我们能够看到懂的内容显示。</p><p>  若读取时的编码格式与保存时的编码格式不一致，则会造成内容混乱（乱码）。<br>  常用字符集（字库）：<br>       utf-8:<br>              国际通用字符集<br>       gb2312:<br>              简体中文字符集和英文、数字和少量的特殊符号<br>       gbk:<br>              简体中文字符集和繁体中文字符、英文、数字和少量的特殊符号</p></blockquote><pre><code>   相同点：          都是字符的编码格式   区别：          大小：                 utf-8&gt;gbk&gt;gb2312          性能：                 uft-8&lt;gbk&lt;gb2312</code></pre><p>需要了解一下的标签：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-8f176a741c105c65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>img标签：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-9fc78957af0361a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>路径：<br>绝对路径：（了解）<br>       带有盘符的路径。<br>              如：C:/Users/Bruce/Desktop/01-HTML第一天\02-其他资料\案例\04春夏秋冬/images/chun.jpg<br>缺点：可移植性差<br>​<br>带有网址的路径：<br>              如：<a href="https://img12.360buyimg.com/da/jfs/t3172/29/7532815266/78514/96c6e177/58ba3348N479cafe1.jpg" target="_blank" rel="external">https://img12.360buyimg.com/da/jfs/t3172/29/7532815266/78514/96c6e177/58ba3348N479cafe1.jpg</a></p><p>相对路径：（重点）<br>       图片和html文件在同一目录时，html文件可以直接使用图片</p></blockquote><pre><code>   html文件在图片的上级目录时，html文件需要先找到图片所在的目录，进去再找图片。   图片在html文件的上级目录时，html文件需要先返回上级目录，再去找图片。</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/5006978-bd67d42fb481adec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-c57486a6cc498dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-3412f5f4a8219707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-52b8ee5290f8e040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-d8ab1cf85c0b0449.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5006978-ccbf159ac0970ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>单元格合并：</p><ul><li>横向合并：<pre class=" language-base"><code class="language-base">colspan:<td colspan="4">统计：</td>   /横向合并4个单元格</code></pre></li><li>纵向合并：<pre class=" language-base"><code class="language-base">rowspan:<td rowspan="4">蜀国</td>   /纵向合并4个单元格</code></pre></li></ul><p>表单元素：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-9e500966a7cae523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注册页面上能够填写的内容都是我们的表单元素。<br>作用：用来收集用户的信息，将来提交到服务器。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-944ed3042db5b362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注意点：如果想要多个radio或者checkbox组成一个选择集合，那么必须给每个radio以及checkbox都设置相同name属性。<br>如何给radio,checkbox设置默认值呢？<br>设置另外一个属性：checked=”checked”<br>    我需要给下拉框设置默认值？<br>selected=”selected”<br>如果下拉按钮想多选，</p><pre class=" language-base"><code class="language-base"><select size="4" multiple="multiple">      /*size的意思就是框的大小</code></pre></blockquote><h1 id="7、Html中空格的合并现象："><a href="#7、Html中空格的合并现象：" class="headerlink" title="7、Html中空格的合并现象："></a>7、Html中空格的合并现象：</h1><blockquote><p>特点：无论在页面有同时出现多少个空格，缩进，换行，将来浏览器在解析的时候只会当一个空格显示。<br>结论：html中对空格，缩进，换行不敏感，如果同时出现多个空格缩进或者执行，页面只会把它们当作一个空格来解析。<br>特殊字符对应的转译符：<br><img src="http://upload-images.jianshu.io/upload_images/5006978-a274d086f721a078.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><h1 id="8、SEO与标签的语义化："><a href="#8、SEO与标签的语义化：" class="headerlink" title="8、SEO与标签的语义化："></a>8、SEO与标签的语义化：</h1><blockquote><p>SEO：搜索引擎优化。<br>作用：用来优化网站，使用网站在搜索引擎上的排名先前。<br>百度是如何收录一个网站的信息的呢？<br>百度自己写的一个程序来收录每个网站的信息。<br>标签语义化的应用：每个html标签都有属于自己的语义，有使用标签时候要一定要了解每个标签的语义，合理使用。（在合适的地方使用合适的标签。）<br>语义化的好处：<br>01对搜索引擎的友好（将来网络爬虫进入页面之后可以很方便的得到页面的重要信息。）<br>02提升用户体验<br>03利于代码的可读、维护、提高开发效率.<br>Html中大部分的标签都具有语义，所在使用的时候一定要注意。还有一部分标签没有语义，没有语义的标签一般只用来进行布局。</p></blockquote><h2 id="9、HTML总结"><a href="#9、HTML总结" class="headerlink" title="9、HTML总结"></a>9、HTML总结</h2><blockquote><p>html:超文本标记语言。可以表示图片，音频，视频，超连接（a）.<br>html的作用：用来页面的内容添加语义，用来确定html页面的结构。<br>html：决定页面的结构（给内容添加语义） 骨骼<br>css: 决定页面的样式（使用页面更好看）   穿着<br>JavaScript:决定页面的行为（使页面动起来） 行为</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> HTML基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装系统</title>
      <link href="/2017/11/02/zhong-yi-xiang/zhuang-xi-tong/"/>
      <url>/2017/11/02/zhong-yi-xiang/zhuang-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>#准备工作：</p><ul><li>大白菜U盘（至少16G，内含以下工具）</li><li>win7、win8、win10的ISO中的boot、bootmgr、sources文件（下面简称“系统三文件”）<a href="https://msdn.itellyou.cn/" target="_blank" rel="external">系统下载地址</a></li><li>激活工具(百度自己找)</li><li>office2016安装包</li><li>net3.5</li><li>net4.0</li><li>office激活工具</li><li>自己手机的驱动（安卓系统的手机）</li></ul><h2 id="检查："><a href="#检查：" class="headerlink" title="检查："></a>检查：</h2><ul><li>1、    装系统之前，检查C盘或者桌面有没有什么重要的文件？电脑的内存是多少？桌面的文件可以在PE里面打开C盘/用户/<em>*</em>（用户名）/桌面，然后选择复制。4G以下的装32位系统，4G以上的装64位系统。</li><li>2、     插入U盘，笔记本的话开机时按F2（或者fn + F2），台式机按Delete，进入开机启动项的设置页面，用方向键移到BOOT或者bios，把第一启动项改为U盘启动，按F10保存并退出。(这里要注意的地方,是每台机的开机启动项都是不同的,所以要灵活变通)</li><li>3、    进入PE（需要分区的话要告诉机主把重要的资料备份好，因为分区的话硬盘的所有资料都没有的，还要注意看磁盘需不需要转换，windows的系统是要mar格式的），看下C盘多大，一般的win7至少需要20G的容量，把C盘重要的文件复制到其他盘，格式化C盘，把系统三文件复制到C盘，重启，进入开机设置页面，按F9恢复硬盘启动，按F10保存并退出。（这里要注意：有的机器恢复默认还是启动不了的，可以继续让U盘启动，在选择PE的时候，选择“尝试从硬盘上启动”、继续点“尝试从硬盘上启动”）</li><li>4、    Win7的安装步骤：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-c27d19b995a83bf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-67ab278b168c54e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5c0becf4e67ff837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-b348762050590029.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>选择把系统安装在C盘，点下一步（我这里是用虚拟机截图的，所以与真实的电脑有点不同）</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-a30174d23a7b5e00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-65581ade2aef317d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>请等待，一般的电脑在这一步是需要20分钟左右，要是超过1小时的话就是硬盘有问题，可能是硬盘老化了，可能是硬盘有磁盘坏道，遇到这种情况，也是很难搞的，只有慢慢等待了，3—4小时的也有遇到过。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-775508d97984984e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>这里输入电脑名字（叫机主自己输入，可以建议用姓名的首位字母）下一步</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-a5f9dee700186590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>一般不建议设立密码。直接点下一步，当然，要是机主坚持要的话就叫机主输入</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-2c8b317bf4fb1086.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>这里要注意，是点“跳过”，因为我们不是用几百块买的系统，严格来讲是属于盗版的</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-2785b0154105f058.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-3b54d50f93d2542f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-887d30c5bc1f7cac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>进入系统。<br>Win8的安装步骤：前面基本一致，接下来：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-4fe2af2ca0554f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-80f0f3acfbc2a45b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-5f41e14e6896b09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>点击，选择“不设置windows更新”然后下一步</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-e4a8d95111d8c828.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-487aebae5cdb0453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-c9868b20b92170aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-9cc327258bc7fe1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-dbbeccb6bf3f1f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>输入用户名和密码（不建议输入密码）、点击“完成”<br>然后电脑就会帮你完成你的设置了，等5分钟左右，会进入系统了。</li><li>进入系统，在运行处输入msconfig  回车，点引导-把那个非系统的引导删了，用系统激活工具激活系统，重启</li><li>5、    重启后的电脑，右击计算机-属性，看一下激活了没有，若是没有激活就再激活一次，或者换一个激活工具激活，要是还激活不了就说明是主板问题，只能换个系统咯。<br>接下来是安装驱动了，需要注意的是此时电脑的网卡驱动是没有的，不能上网下载驱动，咋办呢？首先安装驱动精灵（鲁大师也行），然后安装自己手机型号的驱动（事先下载好在自己的U盘的），用USB线把手机和电脑连接起来并打开手机的流量共享，开启USB共享，这样就能连接到网络了，用手机的流量下载好网卡驱动或者无线网卡驱动，这个具体看宿舍的网络类型。</li><li>6、    网卡驱动下载好后，就可以上网咯。拔掉手机，联网安装剩下的其他驱动。驱动是安装在C盘的，切记！</li><li>7、    安装驱动的时候，闲来无事我们可以安装office。</li><li>8、    进入系统后，检查一下驱动是否安装好，没有安装好的继续下载安装。打开office激活工具，激活office，激活不了office的话，就用net3.5（win7）或者4.0（win8）修改一下电脑的底层程序，再激活。检查是否激活。</li><li>9、    打开控制面板-系统与安全-操作中心，把不需要的提示去掉，不需要的更新也去掉。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-699a5b6942a20138.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>桌面右键，设置显卡，选择使用独立显卡和高性能（每台机都不一样）。</li><li>打开C盘，把sources文件删除掉，若发现有windows old这个文件夹的话，也把它删了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 中医箱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈angularJS</title>
      <link href="/2017/11/02/angularjs/qian-tan-angularjs/"/>
      <url>/2017/11/02/angularjs/qian-tan-angularjs/</url>
      
        <content type="html"><![CDATA[<ul><li><h5 id="1-Angular简称NG"><a href="#1-Angular简称NG" class="headerlink" title="1  Angular简称NG"></a>1  Angular简称NG</h5></li><li><h5 id="2-Angular的重要特性"><a href="#2-Angular的重要特性" class="headerlink" title="2 Angular的重要特性"></a>2 Angular的重要特性</h5><ul><li>MVC: 在前端引入了MVC的设计模式.</li><li>模块化开发</li><li>自动的双向数据绑定</li><li>语义化标签(自定义标签)</li><li>依赖注入</li><li>其核心就是通过指令扩展了HTML,通过表达式绑定数据到HTML</li><li>Angular不推崇DOM操作,也就是说在NG中几乎找不到任何的DOM操作.</li><li>ng最主要是用来实现spa应用. - 单页面应用程序</li></ul></li></ul><ul><li><h5 id="3-下载方式"><a href="#3-下载方式" class="headerlink" title="3 下载方式"></a>3 下载方式</h5><blockquote><p>1.官方网站下载：<br><a href="https://angularjs.org/" target="_blank" rel="external">https://angularjs.org/</a></p><ol><li>npm下载：<br>npm install angular</li><li>通过bower下载：<br>bower install angular</li></ol></blockquote></li><li><h5 id="4-代码中的MVC"><a href="#4-代码中的MVC" class="headerlink" title="4 代码中的MVC"></a>4 代码中的MVC</h5></li><li>我们将我们的代码分为三部分<ul><li>M - Model 数据 数据实体,用来保存页面要展示的数据.</li><li>V - View 视图 负责显示数据的,一般其实就是指的html页面.</li><li>C - Controller 控制器 控制整个业务逻辑,负责处理数据,比如数据的获取,以及数据的过滤，进而影响数据在视图上的展示.</li></ul></li><li>这样,这3部分各司其职,分工合作,我们的代码就会变得更有层次并容易维护.</li><li>这样的程序设计模式,我们就叫做MVC设计模式.</li><li>所以,MVC并不是一个新的知识点,而是一个新的写代码的套路.</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5006978-61df8c64e4c267b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="架构"></p><ul><li>MVC是由后端而来,由于受到前端技术的限制便有了一些细节的调整，进而出现了很多MVC的衍生版（子集）-  如MVVM、MVW、MVP、MV*等。</li><li><p>注：做为初学可以不必过于在意这些概念。</p></li><li><h5 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5  模块化"></a>5  模块化</h5></li><li>使用AngularJS构建应用（App）时是以模块化（Module）的方式组织的，即将整个应用划分成若干模块，每个模块都有各自的职责，最终组合成一个整体。</li><li><p>采用模块化的组织方式，可以最大程度的实现代码的复用，可以像搭积木一样进行开发。</p></li><li><h5 id="5-1-定义应用"><a href="#5-1-定义应用" class="headerlink" title="5.1 定义应用"></a>5.1 定义应用</h5></li><li>通过为任一HTML标签添加ng-app属性，可以指定一个应用，表示此标签所包裹的内容都属于应用（App）的一部分。通俗的理解就是: ng-app属性标签被Angular管理，包括其中的子标签.Angular会认为这是一个应用，将其作为一个应用来看待。</li></ul><pre><code>&lt;!-- 为html标签添加ng-app表明整个文档都是应用 --&gt;&lt;!-- ng-app属性可以不赋值，但是要关联相应的模块时则必须赋值 --&gt;&lt;html lang=&quot;en&quot; ng-app=&quot;App&quot;&gt;</code></pre><ul><li><h5 id="5-2-定义模块"><a href="#5-2-定义模块" class="headerlink" title="5.2 定义模块"></a>5.2 定义模块</h5><ul><li>AngularJS提供了一个全局对象angular,调用该全局对象的module()方法可以创建一个模块.该方法返回一个模块对象.这个模块对象就是AngularJS用来管理应用的对象.<br>~~~<br>&lt;!DOCTYPE html&gt;<!--为html标签定义ng-app属性 代表整个文档都被ng管理--><html lang="en" ng-app="myApp"><br><head><br><meta charset="UTF-8"><br><title>Title</title><br><script src="lib/angular.js"></script><br><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head><body></body></html></li></ul><p><script><br>   //调用全局对象angular的module方法创建一个模块.<br>   //第一个参数: 模块要管理的标签范围,写上ng-app属性的值.<br>   //第二个参数: 模块依赖,数组,如果不需要依赖,就直接写一个空数组就可以.<br>   //返回值:返回的app对象,我们可以认为这个对象就是用来管理这个模块的.<br>   var app = angular.module(‘myApp’,[])<br></script><br><br><br>~~~</p></li><li><h5 id="5-3-定义控制器"><a href="#5-3-定义控制器" class="headerlink" title="5.3 定义控制器"></a>5.3 定义控制器</h5><ul><li>接下来我们可以通过app模块对象来创建控制器.</li><li>调用app模块对象的controller方法，就可以创建控制器. </li></ul></li></ul><pre><code>//调用全局对象angular的module方法创建一个模块.  //第一个参数: 模块要管理的标签范围,写上ng-app属性的值.  //第二个参数: 模块依赖,数组,如果不需要依赖,就直接写一个空数组就可以.  //返回值:返回的app对象,我们可以认为这个对象就是ng用来管理这个模块的.  var app = angular.module(&#39;myApp&#39;,[])  //调用app的controller方法创建控制器.  //第一个参数: 要将创建的控制器关联到指定的View上，字符串.  //第二个参数: 这是一个数组,数组的其中一个元素是&#39;$scope&#39;,  //           数组的最后一个元素必须是1个function 参数是$scope  //           先这么认为,就这么死写,后面会解释原因.  app.controller(&#39;demoCtrl&#39;,[&#39;$scope&#39;,function ($scope) {  }]);</code></pre><ul><li>但是这个时候,我们只是创建了控制器,并没有将控制器和视图关联起来.<ul><li>视图是用来负责显示数据的,控制器是来处理数据模型,并将数据模型给视图展示.</li><li>视图就是我们的html页面. 所以我们可以指定1个html元素(视图)与这个控制器相关联.</li><li>为这个html元素指定1个ng-controller属性.值为创建controller的第1个参数的值.</li></ul></li></ul><pre><code> &lt;div ng-controller=&quot;demoCtrl&quot;&gt; &lt;!-- 这个时候,创建的控制器，就与这个视图关联起来了. --&gt;      &lt;dl&gt;          &lt;dt&gt;&lt;/dt&gt;          &lt;dd&gt;&lt;/dd&gt;      &lt;/dl&gt;  &lt;/div&gt;</code></pre><ul><li><p>这个时候,创建的控制器，就与这个视图关联起来了</p><ul><li>在控制器中就可以处理制造数据.视图中就可以显示模型数据了.</li></ul></li><li><h5 id="5-4-数据模型"><a href="#5-4-数据模型" class="headerlink" title="5.4  数据模型"></a>5.4  数据模型</h5><ul><li>控制器负责处理制造模型数据.</li><li>视图负责显示控制器制造的模型数据.</li><li>那么控制器如何制造数据呢?<pre><code>app.controller(&#39;demoCtrl&#39;,[&#39;$scope&#39;,function ($scope) {//我们可以认为,$scope就是一个数据模型.//这是一个对象，//这个对象可以在控制器中访问,也可以在与控制器关联的视图中直接访问.//那么这个时候,控制器中可以将制造的数据放在这个$scope对象中.$scope.name = &#39;小明&#39;;$scope.info = &#39;我在黑马跟着老王学习前端开发&#39;;}]);</code></pre></li></ul></li><li><p>这个时候,控制器已经负责将数据模型构建完毕,那么视图中如何展示这些数据呢?</p></li></ul><pre><code> &lt;!-- 这个视图与我们创建的控制器相关联    在这个视图中，可以直接访问与之相关联的控制器    构建的$scope对象。需要注意的是，    在视图中，如果要绑定显示$scope对象中的数据的值：    a. 使用{{  }}符号。    b. 在这其中直接写上$scope对象的属性名就可以。    {{ name }}不需要写$scope.name,而是直接写name    c. 这样在ng渲染的时候，就会将{{ name }}显示成$scope.name的值。   --&gt;  &lt;div ng-controller=&quot;demoCtrl&quot;&gt;    &lt;dl&gt;      &lt;dt&gt;{{ name }}&lt;/dt&gt;      &lt;dd&gt;{{ info }}&lt;/dd&gt;    &lt;/dl&gt;  &lt;/div&gt;</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://upload-images.jianshu.io/upload_images/5006978-3d7be2928da29dfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="总结"></p>]]></content>
      
      
      <categories>
          
          <category> angularJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angularJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.NodeJS-introduce</title>
      <link href="/2017/11/01/nodejs/01.nodejs-introduce/"/>
      <url>/2017/11/01/nodejs/01.nodejs-introduce/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJS笔记"><a href="#NodeJS笔记" class="headerlink" title="NodeJS笔记"></a>NodeJS笔记</h1><h3 id="什么是-Node"><a href="#什么是-Node" class="headerlink" title="什么是  Node"></a>什么是  Node</h3><blockquote><p>Node.js® is a JavaScript runtime built on <a href="https://developers.google.com/v8/" target="_blank" rel="external">Chrome’s V8 JavaScript engine</a>. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js’ package ecosystem, <a href="https://www.npmjs.com/" target="_blank" rel="external">npm</a>, is the largest ecosystem of open source libraries in the world.                  –选自：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p><p>翻译：</p><p>1) Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>2) Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>3) Node.js 的包管理器 npm，是全球最大的开源库生态系统</p><p>​                                –选自：<a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a></p></blockquote><ul><li><p>NodeJS 是一个构建于Chrome V8 引擎之上的一个JavaScript的运行时环境</p></li><li><p>Node 可以像浏览器一样去解析和执行JavaScript代码  </p></li><li><p>JavaScript 特点：</p><ul><li>动态语言<ul><li>预编译</li><li>再执行</li></ul></li><li>编译和执行都在浏览器环境中完成<ul><li>JavaScript包括<ul><li>ECMAScript<ul><li>var</li><li>if</li><li>while</li><li>function</li><li>Date</li><li>Math</li><li>….</li></ul></li><li>DOM<ul><li>document</li></ul></li><li>BOM<ul><li>window</li></ul></li></ul></li><li>通过编译解析引擎解析和执行JavaScript脚本代码</li><li>Chorme V8 引擎是所有浏览器里面解析和执行js最快的</li></ul></li></ul></li><li><p>NodeJS特点：</p><ul><li>NodeJS 的作者将 Chrome 的 V8 引擎移植出来，作为NodeJS 的运行时环境</li><li>在Node 中，没有界面，没有样式（不需要再关心HTML、CSS）</li><li>又基于 V8 引擎构建了一系列的API<ul><li>ECMASCript：<ul><li>var</li><li>if</li><li>while</li><li>function</li><li>Date</li><li>Math</li><li>….</li></ul></li><li>文件操作</li><li>网络操作</li><li>让JavaSCript代码具有了服务器编程能力（使JavaScript代码成为了服务器端代码）</li></ul></li><li>事件驱动</li><li>非阻塞IO模型：大量的异步编程接口与<ul><li>ajax 一样的 API 调用方式</li><li>异步：回调</li></ul></li><li>跨平台</li><li>单线程</li><li>轻量和高效</li><li>Node.js 的包管理器 npm，是全球最大的开源库生态系统<ul><li>npm 是世界上最大的开源生态系统</li><li>在 npm 上发布的第三方包已经接近  <strong>35</strong>  万个之多</li><li>每个包只能解决单一问题，解决不了业务</li></ul></li></ul><pre class=" language-tex"><code class="language-tex">Chrome V8引擎    浏览器内核可以分为两个部分，即：渲染引擎和JS引擎。    渲染引擎：负责对网页语法的解释（如HTML、JavaScript）并渲染网页。 所以，通常所谓的浏览器内核也就是浏览器所采用的渲染引擎，渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。不同的浏览器内核对网页编写语法 的解释也有不同，因此同一网页在不同的内核的浏览器里的渲染（显示）效果也可能不同，这也是网页编写者需要在不同内核的浏览器中测试网页显示效果的原因。    JS引擎：解析 Javascript语言，执行 javascript语言来实现网页的动态效果    Chrome V8引擎：作为一个 JavaScript 引擎，最初是服役于 Google Chrome 浏览器的。它随着 Chrome 的第一版发布而发布以及开源。现在它除了 Chrome 浏览器，已经有很多其他的使用者了。诸如 NodeJS、MongoDB、CouchDB 等。</code></pre></li></ul><h3 id="为什么要学习NodeJS"><a href="#为什么要学习NodeJS" class="headerlink" title="为什么要学习NodeJS"></a>为什么要学习NodeJS</h3><ul><li>打开服务器的黑盒子</li><li>满足公司的招聘需求：需要具有一定的服务器开发经验</li><li>提供更广阔的发展前景：如果是纯粹的前端想要向高级前端发展，服务端就是瓶颈</li><li>成为全栈的必经之路</li></ul><h3 id="Node-应用场景"><a href="#Node-应用场景" class="headerlink" title="Node 应用场景"></a>Node 应用场景</h3><ul><li>提供服务（Java , PHP , .Net , Python , Ruby 等服务器语言能做的Node都能做）</li><li>网站开发，提供网站服务器</li><li>数据库交互</li><li>移动应用：后台</li><li>网络游戏：后台</li><li>CLI （Commond Line Interface）程序：<ul><li>git</li><li>gulp</li><li>hexo</li><li>Node 具有开发命令行工具的能力 <ul><li>webpack 打包构建工具</li><li>http-server 在终端中快速提供一个服务</li><li>borwer-sync 提供服务，提供浏览器自动刷新的能力</li></ul></li></ul></li></ul><h3 id="Node-的优势领域"><a href="#Node-的优势领域" class="headerlink" title="Node 的优势领域"></a>Node 的优势领域</h3><ul><li><p>对 IO 操作比较频繁的操作</p><ul><li>文件读写</li><li>和数据库交互：网络数据IO</li></ul></li><li><p>实时通信</p><ul><li><p>聊天软件：微信、QQ、直播</p><p>​</p></li></ul></li></ul><h3 id="NodeJS-学习资源"><a href="#NodeJS-学习资源" class="headerlink" title="NodeJS 学习资源"></a>NodeJS 学习资源</h3><ul><li>《Node.js 权威指南》：官方API详解：<a href="https://nodejs.org/dist/latest-v6.x/docs/api/" target="_blank" rel="external">https://nodejs.org/dist/latest-v6.x/docs/api/</a></li><li>JavaScript 标准参考教程（alpha）: <a href="http://javascript.ruanyifeng.com/nodejs/fs.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/nodejs/fs.html</a></li><li>Node 入门：<a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">http://www.nodebeginner.org/index-zh-cn.html</a></li><li>中文文档（版本比较旧，凑合看）：<a href="http://www.nodeclass.com/api/node.html" target="_blank" rel="external">http://www.nodeclass.com/api/node.html</a></li><li>CNODE社区：<a href="http://cnodejs.org" target="_blank" rel="external">http://cnodejs.org</a></li><li>CNODE-新手入门：<a href="http://cnodejs.org/getstart" target="_blank" rel="external">http://cnodejs.org/getstart</a></li><li>Node.js包教不包会：<a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">https://github.com/alsotang/node-lessons</a></li><li>朴灵：《深入浅出Node.js》</li></ul><h3 id="NodeJS-安装"><a href="#NodeJS-安装" class="headerlink" title="NodeJS 安装"></a>NodeJS 安装</h3><ul><li>使用NodeJS 安装包安装<ul><li>安装方法，见：安装包—&gt;直接安装Node</li></ul></li><li>使用 nvm 安装和管理 Node<ul><li>安装方法，见：安装包—&gt;使用nvm安装</li></ul></li></ul><pre><code>判断Node 是否安装成功的方法：    1.0 打开CMD    2.0 输入 node + 回车</code></pre><h3 id="Node-中的组成"><a href="#Node-中的组成" class="headerlink" title="Node 中的组成"></a>Node 中的组成</h3><ul><li>基本语法 ECMAScript<ul><li>var</li><li>if</li><li>while</li><li>function</li><li>Date</li><li>Math</li><li>console</li><li>定时器函数<ul><li>setTimeout  clearTimeout</li><li>setInterval  clearInterval</li></ul></li><li>global</li><li>….</li></ul></li><li>用户自定义模块<ul><li>关键字：<ul><li>reuqire：<ul><li>是一个函数，可以在任何NodeJS脚本文件中使用</li><li>作用：就是用来加载模块的（加载解析执行JavaScript脚本文件）</li><li>注意：加载自定义模块时一定要加上“./”，否则加载不出来</li></ul></li><li>module.exports：<ul><li>每个模块都会提供一个接口对象module.exports</li><li>作用：通过require加载可以得到模块返回的module.exports对象（相当于每个模块最后面都会有一句：reutrn module.exports）</li></ul></li><li>特点：<ul><li>自己写每个JS文件都是一个模块</li><li>模块天生就是一个私有的作用域</li><li>可能通过global设置全局变量（不建议）</li></ul></li></ul></li></ul></li><li>第三方模块（由社区/公司/个人提供：如果jquery）<ul><li>所有第三方模块用法都差不多：<ol><li>通过npm 下载</li><li>通过require函引包</li><li>查看第三方包的 API 文档（例如：moment）</li></ol></li></ul></li><li>核心模块<ul><li>核心模块是由Node环境平台本身提供的</li><li>以一个唯一核心 模块标识名称进行暴露</li><li>使用的时候直接通 “require” 进行函数加载<ul><li>如：文件操作模块“fs”，网络操作模块“http”</li></ul></li></ul></li><li>总结：<ul><li>将来我们会结合以上的功能去开发 Node 应用程序，这里先宏观了解一下</li><li>模块的加载机制，会随着课程的深入再具体讲解。</li></ul></li></ul><h3 id="path-环境变量"><a href="#path-环境变量" class="headerlink" title="path 环境变量"></a>path 环境变量</h3><pre><code>问题：为什么不管我们把文件放在哪个目录下面，都可以在CMD中通过Node来运行文件？答案：环境变量。</code></pre><ul><li>什么是环境变量？<ul><li>在CMD中，我们输入一段字符时，系统会将字符当作一个程序去当前路径下面去找对应的程序，如果有，直接运行</li><li>如果没有，系统会去用户变量对应的路径下去找程序，如果能找到直接运行</li><li>如果没有， 系统会去系统变量对应的路径下去找程序，如果能找到，直接运行</li><li>如果都没有，报错</li></ul></li><li>path变量特点：<ul><li>由一个或者多个路径组成，路径之间以  <strong>英文分号</strong> 隔开</li><li>将来CMD会按照path中的路径一个一个去找对应的程序，如果有就运行，如果没有就出错</li><li>环境变量除了可以是直接放路径以外，还可以通过用户自己来创建一个变量，以： <strong>%变量名%</strong> 的形式添加到path中</li></ul></li></ul><h3 id="常用核心模块"><a href="#常用核心模块" class="headerlink" title="常用核心模块"></a>常用核心模块</h3><h4 id="NodeJS-版-hello-word"><a href="#NodeJS-版-hello-word" class="headerlink" title="NodeJS 版 hello word"></a>NodeJS 版 hello word</h4><pre><code>1. 创建一个文件，后缀名改为：.js2. 在文件中输入 console.log(&quot;hello word&quot;); 3. 使用 node 打开文件：  方法一：通过 CMD 转到文件所在的路径下面：node + 文件名  方法二：直接找到文件所在目录，在空白处：shift + 右键 ----&gt; 在此外打开命令窗口 ----&gt; 在cmd中输入: node + 文件名</code></pre><h4 id="NodeJS-读写文件"><a href="#NodeJS-读写文件" class="headerlink" title="NodeJS 读写文件"></a>NodeJS 读写文件</h4><p>​    读文件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./01_hello word.js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"读取出错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    写文件：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"./00selfbuild.js"</span><span class="token punctuation">,</span><span class="token string">"这是我自己写的内容"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写入文件失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"写入完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="NodeJS-开启服务器"><a href="#NodeJS-开启服务器" class="headerlink" title="NodeJS 开启服务器"></a>NodeJS 开启服务器</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端请求了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>hello word&lt;/h1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构建HTTP服务"><a href="#构建HTTP服务" class="headerlink" title="构建HTTP服务"></a>构建HTTP服务</h3><ul><li><p>编写一个响应 “hello word” 服务</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户端请求了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'hello word'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>注意：<ul><li>服务开启之后除了 request 中的内容会执行多次以外，其它的代码只会执行一行 </li><li>一个端口号只能被一个程序占用。</li></ul></li></ul></li><li><p>根据不同请求输出不同响应服务var http = require(‘http’);</p><pre class=" language-javascript"><code class="language-javascript">              <span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">var</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span> url <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'home index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'aaa index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器启动成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      注意：          所有请求都是以 “<span class="token operator">/</span>” 开头的</code></pre></li></ul><ul><li><p>根据不同请求输出不同文件服务：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./temp/index.html'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> url <span class="token operator">==</span> <span class="token string">'/a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'请求的是a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器开启成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>注意：<ul><li>可以通过自己写的服务在不同的页面中跳转，跳转时可以不加ip和端口号</li><li>如果在自己的html页面中添加一些css文件/图片，那么将来服务是没有办法拿到css文件件/图片的。</li></ul></li></ul></li><li><p>构建一个类似于 Apache 的功能</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>            <span class="token keyword">var</span> filePath <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">+</span> url<span class="token punctuation">;</span>            fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span> filePath<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found'</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器开启成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>注意：文件的命名不能以“/”开头，否则服务器会去当前文件处的磁盘根目录去找到文件</p><p>​</p><h3 id="渲染方式"><a href="#渲染方式" class="headerlink" title="渲染方式"></a>渲染方式</h3></li></ul></li><li><p>浏览器渲染</p><ul><li>特点<ul><li>从服务器得到数据</li><li>在浏览器中将数据进行渲染</li></ul></li><li>优点：<ul><li>第一次加载页面时数据相对而言会少一点</li><li>用户体验会好一点</li></ul></li><li>缺点：<ul><li>不利于SEO优化</li></ul></li></ul></li><li><p>服务器渲染</p><ul><li>特点：<ul><li>所有的数据在服务器端已经加载完毕</li><li>浏览器只负责渲染页面就可以</li></ul></li><li>优点：<ul><li>利于SEO优化</li></ul></li><li>缺点：<ul><li>第一次加载时速度会慢一点</li></ul></li></ul><p>​</p></li></ul><h3 id="文件操作的同步与异步"><a href="#文件操作的同步与异步" class="headerlink" title="文件操作的同步与异步"></a>文件操作的同步与异步</h3><ul><li><p>异步读取文件</p><p>``` var fs = require(&#39;fs&#39;);<br>console.log(‘111’);</p><p>fs.readFile(‘./a.txt’,function(err,data) {</p><pre><code>console.log(&#39;222&#39;);</code></pre><p>});</p><p>fs.readFile(‘./b.txt’,function(err,data) {</p><pre><code>console.log(&#39;333&#39;);</code></pre><p>});</p><p>fs.readFile(‘./c.txt’,function(err,data) {</p><pre><code>console.log(&#39;444&#39;);</code></pre><p>});</p><p>console.log(‘555’);<br>```</p></li><li><p>同步读取文件</p><pre><code>  ​```  var fs = require(&#39;fs&#39;);  console.log(&#39;111&#39;);  var dataA = fs.readFileSync(&#39;./a.txt&#39;).toString();  console.log(&#39;222&#39;);  console.log(dataA);  var dataB = fs.readFileSync(&#39;./a.txt&#39;).toString();  console.log(&#39;333&#39;);  console.log(dataB);  var dataC = fs.readFileSync(&#39;./a.txt&#39;).toString();  console.log(&#39;444&#39;);  console.log(dataC);  console.log(&#39;555&#39;);  ​```</code></pre></li></ul><ul><li><p>区别：</p><ul><li>异步：<ul><li>通过一个回调函数来获取异步操作结果</li><li>异步操作的回调函数第一个 参数：err<ul><li>如果操作成功：err 为null</li><li>如果操作失败：err 为 错误对象</li><li>所以在异步操作中，优先判断 err 是否出错</li><li>在异步操作中，无法通过try-catch来捕获异常</li></ul></li></ul></li><li>同步：<ul><li>直接等待代码读取完文件再去执行下面的代码</li></ul></li></ul></li></ul><h3 id="第三方模块：模板引擎的使用"><a href="#第三方模块：模板引擎的使用" class="headerlink" title="第三方模块：模板引擎的使用"></a>第三方模块：模板引擎的使用</h3><ul><li>总结：数据使用模板渲染即可以在浏览器端渲染，又可以在服务器端渲染.<ul><li>区别：<ol><li>在浏览器端渲染（如：京东商品的评论信息），可以使页面加载更快，用户体验更好</li><li>在服务器端渲染（如：京东商品数据），可以使页面利于SEO优化</li></ol></li></ul></li></ul><h3 id="得到文件的状态"><a href="#得到文件的状态" class="headerlink" title="得到文件的状态"></a>得到文件的状态</h3><ul><li>fs.stat(path, callback)<ul><li>作用：用来判断传入的路径的状态</li><li>参数：<ul><li>path：要传入的路径</li><li>callback：回调函数<ul><li>回调函数参数：<ul><li>err 目录出错时的对象</li><li>stat 路径的状态对象<ul><li>stat.isFile()：判断路径对应的是否是文件</li><li>stat.isDirectory()：判断路径对应的是否是文件夹</li><li>stat.size：得到对应路径文件的大小（如果路径对应的是文件夹，则得不到大小）</li><li>stat.mtime：得到应对路径文件的修改时间</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="使用-nodemon-实现改完代码服务自动重启"><a href="#使用-nodemon-实现改完代码服务自动重启" class="headerlink" title="使用 nodemon 实现改完代码服务自动重启"></a>使用 nodemon 实现改完代码服务自动重启</h3><ul><li><p>nodemon 是一个基于 Node 开发的一个命令行工具，</p><ul><li>可以实现监视代码改动，自动重启服务的功能。</li><li>本质还是通过 node 执行的咱们自己写的脚本代码。</li></ul></li><li><p>使用步骤：</p><ul><li><p>第一，安装 nodemon</p><pre><code>简写：npm i -g nodemon全称：npm install --global nodemon</code></pre></li><li><p>第二，基本使用：</p><pre><code>​``` 以前的做法：node app.js 现在的做法：nodemon app.js ​```### 使用 nodemon 实现改完代码服务自动重启</code></pre></li></ul></li></ul><ul><li><p>nodemon 是一个基于 Node 开发的一个命令行工具，</p><ul><li>可以实现监视代码改动，自动重启服务的功能。</li><li>本质还是通过 node 执行的咱们自己写的脚本代码。</li></ul></li><li><p>使用步骤：</p><ul><li><p>第一，安装 nodemon</p><pre><code>简写：npm i -g nodemon全称：npm install --global nodemon</code></pre></li><li><p>第二，基本使用：</p><pre><code>   以前的做法：node app.js   现在的做法：nodemon app.js</code></pre></li></ul></li></ul><h3 id="CommonJS-规范："><a href="#CommonJS-规范：" class="headerlink" title="CommonJS 规范："></a>CommonJS 规范：</h3><ul><li><p>module对象</p><ul><li>module.exports</li><li>exports</li><li>在CommonJS 中规定：一个模块返回数据可以通过module.exports和rexports两个关键字来返回</li><li>模块最终返回的仅仅只是 modules.exports</li><li>exports 仅仅只是 modules.exports的一个引用</li></ul><pre><code>验证module.exports与exports的关系：    1）console.log(module.exports === exports);    2）exports.a = 123;    3）exports = fucntion() {}    4）exports = modules.exports =  fucntion() {}</code></pre></li><li><p>模块加载机制</p><ul><li><p>require关键字：</p><ul><li>可以帮助一个模块加载另一个模块</li></ul></li><li><p>优先从缓存中加载</p><ul><li>Node 加载模块时，如果这个模块已经被加载过了，则会直接缓存起来，将来再次引用时不会再次加加载这个模块（即：如果一个模块被加载两次，则模块中的代码只会被执行一次）</li><li>加载模块本质上是加载模块中的modules.exports值</li></ul></li><li><p>核心模块</p><ul><li>先去缓存中看下是否存在，如果有，直接拿来使用</li><li>如果没有，则加载</li></ul></li><li><p>自定义模块</p><ul><li>以 ‘./‘ 或者 ‘../‘ 或者 ‘c:/xxx’ 类似于这样的标识路径作为加载名</li></ul></li><li><p>第三方模块：包</p><ul><li>先在当前文件的模块所属目录去找 node_modules目录</li><li>如果找到，则去该目录中找 moment 目录</li><li>如果找到 moment 目录， 则找该目录中的 package.json文件</li><li>如果找到 package.json 文件，则找该文件中的 main属性</li><li>如果找到main 属性，则拿到该属性对应的文件</li><li>如果找到 moment 目录之后，<ul><li>没有package.json</li><li>或者有 package.json 没有 main 属性</li><li>或者有 main 属性，但是指向的路径不存在 </li><li>则 node 会默认去看一下 moment 目录中有没有 index.js ,index.node, index.json 文件</li></ul></li><li>如果找不到index 或者 找不到 moment 或者找不到 node_modules </li><li>则进入上一级目录找 node_moudles 查找（规则同上）</li><li>如果上一级还找不到，继续向上，一直到当前文件所属磁盘的根目录</li><li>如果到磁盘概目录还没有找到，直接报错</li></ul><pre><code>核心模块：    由 Node 本身提供，通过唯一的模块标识名进行加载    核心模块本质上也是文件模块，它已经被编译到可执行文件中了第三方模块用户自定义模块</code></pre></li></ul></li><li><p>模块的兼容处理</p><ul><li><p>有些模块即能在浏览器端使用，又能在服务器端使用，是因为它们作了兼容处理（如：moment）</p><pre><code>(function (global, factory) {    typeof exports === &#39;object&#39; &amp;&amp; typeof module !== &#39;undefined&#39; ? module.exports = factory() :typeof define === &#39;function&#39; &amp;&amp; define.amd ? define(factory) :    global.moment = factory()}(this, (function () { &#39;use strict&#39;;</code></pre></li></ul></li></ul><h3 id="文件上传第三方包：formidable"><a href="#文件上传第三方包：formidable" class="headerlink" title="文件上传第三方包：formidable"></a>文件上传第三方包：formidable</h3><pre><code>    在表单中如果想上传文件必须将表单中的属性：enctype 设置为 multipart/form-data才可以。</code></pre><h2 id="ECMAScript-6-2015"><a href="#ECMAScript-6-2015" class="headerlink" title="ECMAScript 6 (2015)"></a>ECMAScript 6 (2015)</h2><ul><li><p>严格模式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span></code></pre><ul><li>如果开启了严格模式，变量不能直接使用，必须先申明，申明变量时一定要用var / let</li><li>更多介绍：<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html</a></li></ul></li><li><p>申明一个变量(let)</p><ul><li>let 申明的变量没有变量提升</li><li>let 申明的变量存在块级作用域<ul><li>可以用来解决闭包问题</li></ul></li><li>let 申明的全局变量在函数内部也可以使用</li></ul></li><li><p>申明一个常量 (const)</p><ul><li>一旦设置无法修改</li><li>可以改变对象中的属性</li></ul></li><li><p>字符串的一些扩展方法的使用</p><ul><li><p>includes() ：返回布尔值，表示是否找到了参数字符串</p></li><li><p>startsWith() ：返回布尔值，表示是否找到了参数字符串</p></li><li><p>endsWith() ：返回布尔值，表示参数字符串是否在源字符串的尾部</p></li><li><p>repeat()：返回一个新字符串，表示将原字符串重复n次</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> “hello world”<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>‘hello’<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>‘world’<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true   ，表示从第6个开始后面的字符是 world</span>s<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span>‘hello’<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true ，表示前5个字符是hello</span>‘x’<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// “xx”</span>‘hello’<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// “hellohello”</span>‘ivan’<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// “”</span></code></pre></li></ul></li><li><p>模板字符串</p><ul><li>使用“`”来定义模板字符串</li><li>在模板字符串中可以保持变量的结构</li><li>在模板字符串中可以直接使用js代码格式：${ code }</li></ul></li><li><p>箭头函数的推演</p><pre class=" language-javascript"><code class="language-javascript">写法<span class="token number">1</span><span class="token punctuation">:</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">-</span> y <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>写法<span class="token number">2</span>：arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">-</span> y <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>写法<span class="token number">3</span>：arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>箭头函数的其它写法</p><pre><code>如果参数只有一个，可以将()省略    // arr.map(c=&gt;c+1);如果没有参数，则一定能要写上()     // ()=&gt; console.log(‘a’)如果多于一个参数，每个参数之间用逗号分隔   (x, y) =&gt; { ... }如果方法体只有一句代码，可以省略{} 和分号，如果有返回可以省略return如果方法体多于一句代码，则不能省略{} ,每句代码使用 分号分隔</code></pre></li><li><p>箭头函数的一些特点</p><pre><code>a.箭头函数没有自己的this，函数体内部写的this，指向的是外层代码块的thisb.箭头函数内部的this是定义时所在的对象，而不是使用时所在的对象并且不会改变c.箭头箭头函数不能用作构造函数d.箭头函数内部不存在arguments，箭头函数体中使用的arguments其实指向的是外层函数的arguments</code></pre></li></ul><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><ul><li>作者：<a href="https://github.com/tj" target="_blank" rel="external">https://github.com/tj</a></li><li>Github：<a href="https://github.com/expressjs/express" target="_blank" rel="external">https://github.com/expressjs/express</a></li><li>官网：<a href="http://expressjs.com/" target="_blank" rel="external">http://expressjs.com/</a></li><li>中文翻译：<a href="http://www.expressjs.com.cn/" target="_blank" rel="external">http://www.expressjs.com.cn/</a></li><li>awesome-express: <a href="https://github.com/wabg/awesome-express" target="_blank" rel="external">https://github.com/wabg/awesome-express</a></li></ul><h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save express</code></pre><p>hello world：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Example app listening on port 3000!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>基本路由：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a POST request'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a PUT request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Got a DELETE request at /user'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Express-中外置路由使用"><a href="#Express-中外置路由使用" class="headerlink" title="Express 中外置路由使用"></a>Express 中外置路由使用</h3><p>router.js 文件代码如下:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 加载 express 模块</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 express.Router() 方法，得到一个路由容器实例</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. 为 router 添加不同的路由</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello express'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 将 router 路由容器导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><p>在 app.js 文件中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 加载路由模块</span><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 将路由模块导出的路由容器 router 通过 app.use() 方法挂载到 app 实例上</span><span class="token comment" spellcheck="true">//    这样的话咱们的 app 实例程序就拥有了 router 的路由了</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="在-Express-中处理静态资源"><a href="#在-Express-中处理静态资源" class="headerlink" title="在 Express 中处理静态资源"></a>在 Express 中处理静态资源</h3><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/aaa'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.模块化规则</title>
      <link href="/2017/11/01/nodejs/02.mo-kuai-hua-gui-ze/"/>
      <url>/2017/11/01/nodejs/02.mo-kuai-hua-gui-ze/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//CMD规范：</span><span class="token comment" spellcheck="true">//  定义模块：define</span><span class="token comment" spellcheck="true">//  暴露接口：不需要暴露</span><span class="token comment" spellcheck="true">//  引用模块：关键字：require</span><span class="token comment" spellcheck="true">//NodeJS规范：</span><span class="token comment" spellcheck="true">//  定义模块：不需要使用任何关键字，直接创建一个js文件，它就是一个单独的模块</span><span class="token comment" spellcheck="true">//  暴露接口：使用module.exports关键字来暴露接口</span><span class="token comment" spellcheck="true">//  引用模块：关键字：require</span><span class="token comment" spellcheck="true">//引用app.js模块</span><span class="token comment" spellcheck="true">//引用的关键字</span><span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./03api.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.api</title>
      <link href="/2017/11/01/nodejs/03.api/"/>
      <url>/2017/11/01/nodejs/03.api/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//接收一个两个数据相加的API</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将模块的接口暴露出去</span><span class="token comment" spellcheck="true">//暴露的关键字是</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>getSum <span class="token operator">=</span> getSum<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.核心模块之文件模块</title>
      <link href="/2017/11/01/nodejs/04.he-xin-mo-kuai-zhi-wen-jian-mo-kuai/"/>
      <url>/2017/11/01/nodejs/04.he-xin-mo-kuai-zhi-wen-jian-mo-kuai/</url>
      
        <content type="html"><![CDATA[<pre class=" language-script"><code class="language-script">//文件模块：用来帮助我们操作文件//由于核心模块属于一个单独的模块，所以我们在使用之前需要引用这个核心模块var fs = require("fs");//引用文件操作核心模块//在fs核心 模块中，有一个方法可以用来读取文件中的内容//  fs.readFile//      这个方法有两个参数：//          参数一：要读取文件的路径//          参数二：读取后的回调函数//              回调函数也有两个参数：//                  参数一：当读取失败时的错误信息//                  参数二：读取出来的内容,读取出来的内容不会直接以字符串的形式显示而是以Buffer数组显示//                      如果需要内容以字符串的形式来表示，最好将内容.toString()// fs.readFile("./data.txt",function(err,data){//     // console.log("文件读取成功");//     if(err) {//         console.log("文件读取失败");//         return;//     }//     console.log(data.toString());// });//fs核心模块中有一个方法可以帮助我们向文件中写入内容//fs.writeFile：这个方法有个缺点，会将原有的内容覆盖，如果文件不存在会创建一个新的文件//      这个方法有三个参数：//          参数一：要写入文件的路径//          参数二：要写入的内容//          参数三：读取后的回调函数//              回调函数有一个参数：//                  参数一：失败时的错误信息// var str = "好好学习，天天向上";// fs.writeFile("./data.txt",str,function(err){//     if(err) {//         console.log("失败");//         return;//     }//     console.log("成功");// });//由于writeFIle方法会覆盖原有的内容，请根据我们已经学习过的内容写//  一段代码：可以在当前文件的后面追加一段内容//完成追加功能//1.0将原本的内容读取出来fs.readFile("./data.txt", function (err, data) {  if (err) {    console.log("读取失败");    return;  }  //2.0得到要追加的内容  var str = "好好学习，天天向上";  str = data + str;  //3.0重新写入  fs.writeFile("./data.txt", str, function (err) {    if (err) {      console.log("失败");      return;    }    console.log("成功");  });});</code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.helloworld-node版本</title>
      <link href="/2017/11/01/nodejs/05.helloworld-node-ban-ben/"/>
      <url>/2017/11/01/nodejs/05.helloworld-node-ban-ben/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用nodejs开启服务器</span><span class="token comment" spellcheck="true">//在nodejs中如果要开启服务器，需要使用到一个核心模块：http模块</span><span class="token comment" spellcheck="true">//1.0引用http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.0开启服务器</span><span class="token comment" spellcheck="true">//2.1创建服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.2开启服务器</span><span class="token comment" spellcheck="true">//  request事件：在浏览器发送请求时会触发这个事件</span><span class="token comment" spellcheck="true">//  回调函数：请求过来以后要执行的代码</span><span class="token comment" spellcheck="true">//  回调函数有两个参数：</span><span class="token comment" spellcheck="true">//      request：处理浏览器发送给服务器的数据</span><span class="token comment" spellcheck="true">//      response：处理服务器发送给浏览器的数据</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//设置响应报文头</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">"content-type"</span><span class="token punctuation">:</span> <span class="token string">"text/html;charset=utf-8"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"世界，你好！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结束本次请求</span>  response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// response.write("世界，你好！");</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.3开启监听</span><span class="token comment" spellcheck="true">//  回调函数：当服务器开启成功时执行</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器开启成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.根据不同请求响应不同的内容</title>
      <link href="/2017/11/01/nodejs/06.gen-ju-bu-tong-qing-qiu-xiang-ying-bu-tong-de-nei-rong/"/>
      <url>/2017/11/01/nodejs/06.gen-ju-bu-tong-qing-qiu-xiang-ying-bu-tong-de-nei-rong/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启服务器</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.0接收请求的地址</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.0根据不同的请求响应不同的内容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/index"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/abc"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"i don't know"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.根据不同的请求响应不同的文件</title>
      <link href="/2017/11/01/nodejs/07.gen-ju-bu-tong-de-qing-qiu-xiang-ying-bu-tong-de-wen-jian/"/>
      <url>/2017/11/01/nodejs/07.gen-ju-bu-tong-de-qing-qiu-xiang-ying-bu-tong-de-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启服务器</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.0接收请求的地址</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.0判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/index"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/index.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/404.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.完成一个小型静态资源服务器</title>
      <link href="/2017/11/01/nodejs/08.wan-cheng-yi-ge-xiao-xing-jing-tai-zi-yuan-fu-wu-qi/"/>
      <url>/2017/11/01/nodejs/08.wan-cheng-yi-ge-xiao-xing-jing-tai-zi-yuan-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启服务器</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.0接收请求的地址</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.0判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/index"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/index.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/js/jquery.min.js"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./js/jquery.min.js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/img/wj.jpg"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./img/wj.jpg"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/404.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.后台语言模板的渲染</title>
      <link href="/2017/11/01/nodejs/09.hou-tai-yu-yan-mo-ban-de-xuan-ran/"/>
      <url>/2017/11/01/nodejs/09.hou-tai-yu-yan-mo-ban-de-xuan-ran/</url>
      
        <content type="html"><![CDATA[<p>#####1. 首先先去官网查找模板的相关使用</p><blockquote><p><a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p></blockquote><p>在这个网站上输入关键字art-template</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-293ddc134b5c1e81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤1"></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-05c4c576a8391a6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤2"></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-be5b5f03477903f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤3"></p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-d0f137e2f05781e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤4"></p><blockquote><p><a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="external">https://aui.github.io/art-template/zh-cn/index.html</a><br><a href="https://aui.github.io/art-template/zh-cn/docs/" target="_blank" rel="external">https://aui.github.io/art-template/zh-cn/docs/</a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5006978-06f0833f5e3e79db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="步骤5"></p><p>#####代码案例<br>1.下载art-template</p><blockquote><p>npm install art-template</p></blockquote><p>2.下载好后，会有如下文件夹</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-321155f11f812df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模块展示"></p><p>3.创建一个01use-art-template.js,输入下面的代码</p><pre><code>//引用art-tempaltevar template = require(&quot;art-template&quot;);//------------------------输出对象中的属性----------------------------// //1.0定义好模板// var str = &quot;大家好，我叫{{@name}},今年{{@age}}岁了&quot;;// //2.0给模板设置数据// //将模板设置给模板引擎// var render = template.compile(str);// //给模板引擎传入数据// var res = render({//     name: &quot;Robyn&quot;,//     age: 25// });// //输出res// console.log(res);//------------------------输出对象中的属性----------------------------//------------------------判断语法----------------------------// //1.0定义好模板// var str = &quot;大家好，我叫{{@name}},今年{{@age}}岁了，{{if age >= 18}}成年了{{else}}未成年{{/if}}&quot;;// //2.0给模板设置数据// //将模板设置给模板引擎// var render = template.compile(str);// //给模板引擎传入数据// var res = render({//     name: &quot;Robyn&quot;,//     age: 25// });// //输出res// console.log(res);//------------------------判断语法----------------------------//------------------------遍历语法--------------------------//1.0定义模块var str = &quot;&lt;ul&gt;{{each arr}}&lt;li&gt;{{$value}}&lt;/li&gt;{{/each}}&lt;/ul&gt;&quot;// {{each target}}// {{$index}} {{$value}}// {{/each}}var render = template.compile(str);var res = render({    arr: [&quot;tom&quot;,&quot;jack&quot;,&quot;rose&quot;,&quot;lilei&quot;]});console.log(res);//------------------------遍历语法--------------------------</code></pre><p>然后用node运行</p><p><img src="http://upload-images.jianshu.io/upload_images/5006978-3095f47dcf0d9630.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.stat</title>
      <link href="/2017/11/01/nodejs/10.stat/"/>
      <url>/2017/11/01/nodejs/10.stat/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引用核心模板</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断路径</span><span class="token comment" spellcheck="true">//stat方法可以得到文件的状态</span><span class="token comment" spellcheck="true">//  这个方法有两个参数：</span><span class="token comment" spellcheck="true">//      参数一：要判断的路径</span><span class="token comment" spellcheck="true">//      参数二：回调函数</span><span class="token comment" spellcheck="true">//          回调函数两个参数：</span><span class="token comment" spellcheck="true">//                 参数一：错误信息</span><span class="token comment" spellcheck="true">//                 参数二：得到文件的状态对象</span><span class="token comment" spellcheck="true">//                      对象中有方法isFile,isDirectory</span><span class="token comment" spellcheck="true">//                      对象中有属性：size,ctime</span><span class="token comment" spellcheck="true">//                          如果当前状态为目录，则没有size属性</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"是文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>ctime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"是目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>ctime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.解决数组为空的问题</title>
      <link href="/2017/11/01/nodejs/11.jie-jue-shu-zu-wei-kong-de-wen-ti/"/>
      <url>/2017/11/01/nodejs/11.jie-jue-shu-zu-wei-kong-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>#####在for循环中，for执行的时间是瞬间的，而在node中，执行的机制是I/O非阻塞机制，也就是说，for里面的东西还没有完全执行完，后面的代码已经开始执行了。其中这个问题在浏览器端的点击事件上也极为显著，解决的办法就是for里面要执行的代码加个括号，变为自执行函数即可。如以下的demo：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>1<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>2<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>3<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>4<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>5<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>   var lis <span class="token operator">=</span> document.getElementsByTagName<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   for<span class="token punctuation">(</span>var i <span class="token operator">=</span> 0 <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis.length <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>function<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.onclick <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                alert<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.moment</title>
      <link href="/2017/11/01/nodejs/12.moment/"/>
      <url>/2017/11/01/nodejs/12.moment/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://momentjs.cn/" target="_blank" rel="external">http://momentjs.cn/</a></p></blockquote><p>使用moment.js进行时间的格式化</p><p>1.首先先要下载相关moment的插件</p><pre><code>npm install moment</code></pre><p>2.然后去上面的网站可以查看moment的用法</p><p>3.demo演示</p><pre><code>var moment = require(&quot;moment&quot;);var time = moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;);console.log(time);</code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.模拟静态资源服务器</title>
      <link href="/2017/11/01/nodejs/13.mo-ni-jing-tai-zi-yuan-fu-wu-qi/"/>
      <url>/2017/11/01/nodejs/13.mo-ni-jing-tai-zi-yuan-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"art-template"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"moment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启服务器</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.0接收请求的地址</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.0判断：当请求根目录时，我们要将静态文件读取出来，响应回浏览器</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/index.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//3.0得到当前网站的所有的文件以及路径，并且将这些文件和路径进行遍历生成我们需要的html代码</span>            <span class="token comment" spellcheck="true">//得到所有的文件和路径</span>            fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>pathData<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断所有的路径，是文件还是目录</span>                <span class="token keyword">var</span> fileArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> dirArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathData<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>pathData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    fileArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                                        type<span class="token punctuation">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>                                        name<span class="token punctuation">:</span> pathData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                                        size<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>size<span class="token punctuation">,</span>                                        ctime<span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>ctime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span>                                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    dirArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                                        type<span class="token punctuation">:</span> <span class="token string">"dir"</span><span class="token punctuation">,</span>                                        name<span class="token punctuation">:</span> pathData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                                        ctime<span class="token punctuation">:</span> <span class="token function">moment</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>ctime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span>                                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> pathData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token keyword">var</span> arr <span class="token operator">=</span> dirArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>fileArr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">var</span> render <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//fs.readfile读取出来的data是一个十六进制的数组</span>                                    <span class="token comment" spellcheck="true">//但是template.compile后面需要传入一个字符串</span>                                    <span class="token comment" spellcheck="true">//所以在使用的时候需要转为字符串</span>                                    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                                        arr<span class="token punctuation">:</span> arr                                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//    //现在我们已经有了首页的内容，并且有了数据，但是我们需要将数据生成html代码放入到首页的内容中</span>            <span class="token comment" spellcheck="true">//   var render = template.compile(data.toString());</span>            <span class="token comment" spellcheck="true">//   //fs.readfile读取出来的data是一个十六进制的数组</span>            <span class="token comment" spellcheck="true">//   //但是template.compile后面需要传入一个字符串</span>            <span class="token comment" spellcheck="true">//   //所以在使用的时候需要转为字符串</span>            <span class="token comment" spellcheck="true">//   var html = render({</span>            <span class="token comment" spellcheck="true">//       arr: pathData</span>            <span class="token comment" spellcheck="true">//   });</span>            <span class="token comment" spellcheck="true">//   res.end(html);</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.安全的模拟静态资源服务器</title>
      <link href="/2017/11/01/nodejs/14.an-quan-de-mo-ni-jing-tai-zi-yuan-fu-wu-qi/"/>
      <url>/2017/11/01/nodejs/14.an-quan-de-mo-ni-jing-tai-zi-yuan-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器对象</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启服务器</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.0接收请求的地址</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.0判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/index"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/index.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/js/jquery.min.js"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./js/jquery.min.js"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">==</span> <span class="token string">"/img/wj.jpg"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./img/wj.jpg"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./views/404.html"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">"3000"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.异步读写文件</title>
      <link href="/2017/11/01/nodejs/15.yi-bu-du-xie-wen-jian/"/>
      <url>/2017/11/01/nodejs/15.yi-bu-du-xie-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取a文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data/a.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取b文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取c文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">"./data/c.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.同步读写文件</title>
      <link href="/2017/11/01/nodejs/16.tong-bu-du-xie-wen-jian/"/>
      <url>/2017/11/01/nodejs/16.tong-bu-du-xie-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"./data/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//try和catch是用来防止代码出现问题导致后面代码无法运行的，</span><span class="token comment" spellcheck="true">//也就是说如果以后出现同步的代码，为防止代码能够顺利运行，</span><span class="token comment" spellcheck="true">//应该将自己不确定的代码放到try里面去运行，</span><span class="token comment" spellcheck="true">//然后在catch里面书写假如失败的情况</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"./data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b文件读取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c文件开始读取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"./data/c.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c文件读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.url.parse</title>
      <link href="/2017/11/01/nodejs/17.url.parse/"/>
      <url>/2017/11/01/nodejs/17.url.parse/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 19:54:05  * @Last Modified by: Robyn * @Last Modified time: 2017-10-31 19:59:19 */</span><span class="token comment" spellcheck="true">//这个是核心模块的其中一个url功能</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(url);</span><span class="token comment" spellcheck="true">// 可以打印url看看有哪些选项，当然也可以去官网查询其用法，这里需要讲解的是如何将地址栏的id获取</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"http://www.baidu.com:8080/a/b/c?id=2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true的意思是将它变成对象的形式，默认是false，是字符串的形式</span><span class="token keyword">var</span> obj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(obj.query);</span><span class="token comment" spellcheck="true">//下面的代码将能获取到2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.commonjs规范</title>
      <link href="/2017/11/01/nodejs/18.commonjs-gui-fan/"/>
      <url>/2017/11/01/nodejs/18.commonjs-gui-fan/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  模块的定义：</span><span class="token comment" spellcheck="true">//      commonjs规范定义模块：创建的每一个js文件都是一个单独的块</span><span class="token comment" spellcheck="true">//  模块接口的暴露</span><span class="token comment" spellcheck="true">//      使用module.exports关键字来暴露</span><span class="token comment" spellcheck="true">//      也可以使用另一个关键字来暴露：exports</span><span class="token comment" spellcheck="true">//      区别：exports仅仅只是modul.exports的一个引用</span><span class="token comment" spellcheck="true">//          相当于在每个模块中都有这么一段代码： exports = module.exports</span><span class="token comment" spellcheck="true">//      为什么有了module.exports之后还有来一个exports呢？</span><span class="token comment" spellcheck="true">//          为了操作方便</span><span class="token comment" spellcheck="true">//  模块的引用入、：</span><span class="token comment" spellcheck="true">//      使用require关键字来引用其它模块</span><span class="token comment" spellcheck="true">//      自定义模块：</span><span class="token comment" spellcheck="true">//          require("./a.js");</span><span class="token comment" spellcheck="true">//          自定义模块的引用一定会带着路径：/,./,../</span><span class="token comment" spellcheck="true">//      第三方模块：</span><span class="token comment" spellcheck="true">//          require("moment");</span><span class="token comment" spellcheck="true">//          require("art-template");</span><span class="token comment" spellcheck="true">//          加载顺序：</span><span class="token comment" spellcheck="true">// - 先在当前文件的模块所属目录去找 node_modules目录</span><span class="token comment" spellcheck="true">// - 如果找到，则去该目录中找 moment 目录</span><span class="token comment" spellcheck="true">// - 如果找到 moment 目录， 则找该目录中的 package.json文件</span><span class="token comment" spellcheck="true">// - 如果找到 package.json 文件，则找该文件中的 main属性</span><span class="token comment" spellcheck="true">// - 如果找到main 属性，则拿到该属性对应的文件</span><span class="token comment" spellcheck="true">// - 如果找到 moment 目录之后，</span><span class="token comment" spellcheck="true">//   - 没有package.json</span><span class="token comment" spellcheck="true">//   - 或者有 package.json 没有 main 属性</span><span class="token comment" spellcheck="true">//   - 或者有 main 属性，但是指向的路径不存在 </span><span class="token comment" spellcheck="true">//   - 则 node 会默认去看一下 moment 目录中有没有 index.js ,index.node, index.json 文件</span><span class="token comment" spellcheck="true">// - 如果找不到index 或者 找不到 moment 或者找不到 node_modules </span><span class="token comment" spellcheck="true">// - 则进入上一级目录找 node_moudles 查找（规则同上）</span><span class="token comment" spellcheck="true">// - 如果上一级还找不到，继续向上，一直到当前文件所属磁盘的根目录</span><span class="token comment" spellcheck="true">// - 如果到磁盘概目录还没有找到，直接报错</span><span class="token comment" spellcheck="true">//      核心模块：</span><span class="token comment" spellcheck="true">//          require("fs");</span><span class="token comment" spellcheck="true">//          require("http");</span><span class="token comment" spellcheck="true">//          require("url");</span><span class="token comment" spellcheck="true">//          核心模块的引用直接引用模块名称就可以,是直接去nodejs.exe中去找到对应的模块文件</span><span class="token comment" spellcheck="true">// 模块的兼容处理：</span><span class="token comment" spellcheck="true">//  art-template:</span><span class="token comment" spellcheck="true">//      可以在浏览器环境下面使用：window</span><span class="token comment" spellcheck="true">//      也可以在node环境下面使用：</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.moment的使用</title>
      <link href="/2017/11/01/nodejs/19.moment-de-shi-yong/"/>
      <url>/2017/11/01/nodejs/19.moment-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:04:18  * @Last Modified by: Robyn * @Last Modified time: 2017-10-31 20:08:02 */</span><span class="token comment" spellcheck="true">//引用</span><span class="token comment" spellcheck="true">//引用的顺序是，先去寻找核心模块，看看核心模块是否有这个方法，如果没有，就去同级目录的node_modules里面寻找第三方包，如果在同级目录下没有找到，就会往上一级目录去寻找</span><span class="token keyword">var</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"moment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关于node的知识，可以去官网找相关的资料<br>英文网站：</p><blockquote><p>nodejs.org</p></blockquote><p>中文网站：</p><blockquote><p>nodejs.cn</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.let关键字</title>
      <link href="/2017/11/01/nodejs/20.let-guan-jian-zi/"/>
      <url>/2017/11/01/nodejs/20.let-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在ES6中，如果要声明变量除了可以用var关键字，还可以使用let关键字：</span><span class="token comment" spellcheck="true">// var a = 1234;</span><span class="token comment" spellcheck="true">// console.log(a);</span><span class="token comment" spellcheck="true">// let a = 123;</span><span class="token comment" spellcheck="true">// console.log(a);</span><span class="token comment" spellcheck="true">//区别：</span><span class="token comment" spellcheck="true">//1)let声明的变量没有变量提升</span><span class="token comment" spellcheck="true">// console.log(a);//undefined</span><span class="token comment" spellcheck="true">// var a = 123;</span><span class="token comment" spellcheck="true">// console.log(a);//123</span><span class="token comment" spellcheck="true">// console.log(a);//报错：a is not defined</span><span class="token comment" spellcheck="true">// let a = 123;</span><span class="token comment" spellcheck="true">// console.log(a);//123</span><span class="token comment" spellcheck="true">//2)let声明的变量有块级作用域</span><span class="token comment" spellcheck="true">//作用域：后台语言的概念：java php C#</span><span class="token comment" spellcheck="true">//  凡是大括号包含的区域都叫块级作用,块级作用域中的变量会在这个作用域中的代码执行完之后全部销毁。</span><span class="token comment" spellcheck="true">// if(true) {</span><span class="token comment" spellcheck="true">//     var a = 123;</span><span class="token comment" spellcheck="true">//     console.log(a);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// console.log(a);</span><span class="token comment" spellcheck="true">// if(true) {</span><span class="token comment" spellcheck="true">//     let a = 123;</span><span class="token comment" spellcheck="true">//     console.log(a);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// console.log(a);</span><span class="token comment" spellcheck="true">//3) let 申明的全局变量在函数内部也可以使用(区别PHP)</span><span class="token comment" spellcheck="true">// let a = 1; </span><span class="token comment" spellcheck="true">// function fn() {</span><span class="token comment" spellcheck="true">//     console.log(a);</span><span class="token comment" spellcheck="true">// }</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21.严格模式下的作用域生效demo</title>
      <link href="/2017/11/01/nodejs/21.yan-ge-mo-shi-xia-de-zuo-yong-yu-sheng-xiao-demo/"/>
      <url>/2017/11/01/nodejs/21.yan-ge-mo-shi-xia-de-zuo-yong-yu-sheng-xiao-demo/</url>
      
        <content type="html"><![CDATA[<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>1<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>2<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>3<span class="token operator">&lt;</span>/li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span>4<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token string">"use strict"</span><span class="token punctuation">;</span>    var lis <span class="token operator">=</span> document.getElementsByTagName<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // for<span class="token punctuation">(</span>var i <span class="token operator">=</span> 0 <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis.length <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    //     lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.onclick <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    //         alert<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    //     <span class="token punctuation">}</span>    // <span class="token punctuation">}</span>    for<span class="token punctuation">(</span>let i <span class="token operator">=</span> 0 <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis.length <span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.onclick <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            alert<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><blockquote><p>这个例子中，如果不用严格模式的话，for语句会瞬间执行完，而在当前页面alert出来的只会是4，但是如果使用了严格模式，并且声明变量用let来声明的话，会有很严格的后台思想，也就是存在所谓的作用域。所以点击哪个按钮会弹出对应的数字</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22.const常量</title>
      <link href="/2017/11/01/nodejs/22.const-chang-liang/"/>
      <url>/2017/11/01/nodejs/22.const-chang-liang/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:19:24  * @Last Modified by:   Robyn  * @Last Modified time: 2017-10-31 20:19:24  */</span><span class="token comment" spellcheck="true">//变量：内容的数据可以根据自己的需求进行改变</span><span class="token comment" spellcheck="true">//常量：</span><span class="token comment" spellcheck="true">//  1)一旦赋值，不会再改变这个值了</span><span class="token comment" spellcheck="true">// "use strict";</span><span class="token comment" spellcheck="true">// //定义一个常量 </span><span class="token comment" spellcheck="true">// const a = "123";</span><span class="token comment" spellcheck="true">// console.log(a);//123</span><span class="token comment" spellcheck="true">// a = "abc";</span><span class="token comment" spellcheck="true">// console.log(a);//报错</span><span class="token comment" spellcheck="true">//  2)用来保存一些不会改变的值</span><span class="token comment" spellcheck="true">//引用核心 模块</span><span class="token comment" spellcheck="true">// const url = require("url");</span><span class="token comment" spellcheck="true">// function getUlr() {</span><span class="token comment" spellcheck="true">//      url = "www.baidu.com:90"</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//  3)如果常量中存储的是一个对象，不能改变这个对象的引用，但是可以改变这个对象中的值</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"小追命"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name <span class="token punctuation">,</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// obj = {name: "123" ,age: "123"};//改了对象的引用</span><span class="token comment" spellcheck="true">// console.log(obj);</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小小追命"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"纯爷们"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23.模板字符串</title>
      <link href="/2017/11/01/nodejs/23.mo-ban-zi-fu-chuan/"/>
      <url>/2017/11/01/nodejs/23.mo-ban-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:21:16  * @Last Modified by:   Robyn  * @Last Modified time: 2017-10-31 20:21:16  */</span><span class="token comment" spellcheck="true">// var str = "&lt;ul>";</span><span class="token comment" spellcheck="true">// str += "&lt;li>1&lt;/li>";</span><span class="token comment" spellcheck="true">// str += "&lt;li>2&lt;/li>";</span><span class="token comment" spellcheck="true">// str += "&lt;li>3&lt;/li>";</span><span class="token comment" spellcheck="true">// str += "&lt;li>4&lt;/li>";</span><span class="token comment" spellcheck="true">// str += "&lt;/ul>";</span><span class="token comment" spellcheck="true">// console.log(str);</span><span class="token comment" spellcheck="true">//模板字符串：</span><span class="token comment" spellcheck="true">//定义：</span><span class="token comment" spellcheck="true">//  ``:使用``符号将需要定义为字符串的内容包含起来就可以</span><span class="token comment" spellcheck="true">// var str = `我是一个中国人`;</span><span class="token comment" spellcheck="true">// var str = `大家好，我叫追命`;</span><span class="token comment" spellcheck="true">// console.log(str);</span><span class="token comment" spellcheck="true">//1)可以识别字符串中的换行</span><span class="token comment" spellcheck="true">// var str = `&lt;ul></span><span class="token comment" spellcheck="true">// &lt;li>1&lt;/li></span><span class="token comment" spellcheck="true">// &lt;li>2&lt;/li></span><span class="token comment" spellcheck="true">// &lt;li>3&lt;/li></span><span class="token comment" spellcheck="true">// &lt;/ul>`;</span><span class="token comment" spellcheck="true">// console.log(str);</span><span class="token comment" spellcheck="true">//2)可以直接输出变量</span><span class="token comment" spellcheck="true">// var obj = {</span><span class="token comment" spellcheck="true">//     name: "小追命",</span><span class="token comment" spellcheck="true">//     age: 18</span><span class="token comment" spellcheck="true">// };</span><span class="token comment" spellcheck="true">// // var str = "大家好，我叫"+ obj.name +"，今年" + obj.age + "岁了";</span><span class="token comment" spellcheck="true">// var str = `大家好，我叫${obj.name}，今年${obj.age}岁了`;</span><span class="token comment" spellcheck="true">// console.log(str);</span><span class="token comment" spellcheck="true">//3)可以在模板字符串写js代码</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`大家好，我叫追命，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.字符串的扩展方法</title>
      <link href="/2017/11/01/nodejs/24.zi-fu-chuan-de-kuo-zhan-fang-fa/"/>
      <url>/2017/11/01/nodejs/24.zi-fu-chuan-de-kuo-zhan-fang-fa/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:23:39  * @Last Modified by:   Robyn  * @Last Modified time: 2017-10-31 20:23:39  */</span><span class="token comment" spellcheck="true">//includes:判断一个字符串是否包含另一个字符串</span><span class="token comment" spellcheck="true">// var str1 = "abcdefg";</span><span class="token comment" spellcheck="true">// var str2 = "cde";</span><span class="token comment" spellcheck="true">// var result = str1.includes(str2);</span><span class="token comment" spellcheck="true">// if(result) {</span><span class="token comment" spellcheck="true">//     console.log(`str1中包含了str2`);</span><span class="token comment" spellcheck="true">// } else {</span><span class="token comment" spellcheck="true">//     console.log(`str1中没有str2`);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//startsWith():判断一个字符串是否以另一上字符串开头</span><span class="token comment" spellcheck="true">//endsWith():判断一个字符串是否以另一个字符串结尾</span><span class="token comment" spellcheck="true">// var str1 = "abcdefg";</span><span class="token comment" spellcheck="true">// var str2 = "cde";</span><span class="token comment" spellcheck="true">// var result = str1.endsWith(str2);</span><span class="token comment" spellcheck="true">// if(result) {</span><span class="token comment" spellcheck="true">//     console.log("是");</span><span class="token comment" spellcheck="true">// } else {</span><span class="token comment" spellcheck="true">//     console.log("否");</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//repeat(n)：返回一个新字符串，将原有的字符串重复n次</span><span class="token comment" spellcheck="true">// var str = "abc";</span><span class="token comment" spellcheck="true">// var newStr = str.repeat(0);</span><span class="token comment" spellcheck="true">// console.log(newStr);</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25.箭头函数</title>
      <link href="/2017/11/01/nodejs/25.jian-tou-han-shu/"/>
      <url>/2017/11/01/nodejs/25.jian-tou-han-shu/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:26:30  * @Last Modified by:   Robyn  * @Last Modified time: 2017-10-31 20:26:30  */</span><span class="token comment" spellcheck="true">// var arr = [ 1, 41, 22, 32, 58, 9];</span><span class="token comment" spellcheck="true">// //从小到进行排序</span><span class="token comment" spellcheck="true">// var newArr = arr.sort(function(a ,b) {</span><span class="token comment" spellcheck="true">//     return a - b;</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// console.log(newArr);</span><span class="token comment" spellcheck="true">// setTimeout(function() {</span><span class="token comment" spellcheck="true">//     console.log("123");</span><span class="token comment" spellcheck="true">// }, 1000);</span><span class="token comment" spellcheck="true">// setTimeout(()=>{</span><span class="token comment" spellcheck="true">//     console.log("123");</span><span class="token comment" spellcheck="true">// }, 1000);</span><span class="token comment" spellcheck="true">// const fs = require("fs");</span><span class="token comment" spellcheck="true">// fs.readFile("./js/a.js",function(err,data){</span><span class="token comment" spellcheck="true">//     //....</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">//由于在js中大量用到了匿名函数，为了让程序员在书写匿名函数时更加简单，所以ES6中加入一种新的语法用来替代匿名函数：</span><span class="token comment" spellcheck="true">//  它就是：箭头函数</span><span class="token comment" spellcheck="true">//  简写规则：</span><span class="token comment" spellcheck="true">//      1)  直接去掉关键字:function</span><span class="token comment" spellcheck="true">//      2)  使用一个小括号用来存在放参数</span><span class="token comment" spellcheck="true">//             如果只有一个参数可以将小括号省略</span><span class="token comment" spellcheck="true">//             如果没有参数，需要保留小括号，如果有两个和两个以上的参数，小括号也不能省略</span><span class="token comment" spellcheck="true">//      3)  在小括号后面加一个：=> 。读取 goes to</span><span class="token comment" spellcheck="true">//      4)  在=>后面加上一个大括号，用来书写函数的代码体</span><span class="token comment" spellcheck="true">//              如果大括号中的代码只有一句，可以省略大括号,以后代码后的分号</span><span class="token comment" spellcheck="true">//               如果只有一句，并且这一句中有return关键字，直接把return也省略掉</span><span class="token comment" spellcheck="true">// const fs = require("fs");</span><span class="token comment" spellcheck="true">// // fs.readFile("./js/a.js",function(err,data){</span><span class="token comment" spellcheck="true">// //     console.log(data.toString());</span><span class="token comment" spellcheck="true">// // });</span><span class="token comment" spellcheck="true">// fs.readFile("./js/a.js", (err,data)=></span><span class="token comment" spellcheck="true">//     console.log(data.toString())</span><span class="token comment" spellcheck="true">// );</span><span class="token comment" spellcheck="true">// function fn() {</span><span class="token comment" spellcheck="true">//     console.log("abc");</span><span class="token comment" spellcheck="true">// }//具名函数：具备名称的函数</span><span class="token comment" spellcheck="true">// var fn = function() {</span><span class="token comment" spellcheck="true">//     console.log("我是一个匿名函数，要记清楚");</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn();</span><span class="token comment" spellcheck="true">//改为一个箭头函数：</span><span class="token comment" spellcheck="true">// var fn = () =>{console.log("我是一个匿名函数，要记清楚");};</span><span class="token comment" spellcheck="true">// fn();</span><span class="token comment" spellcheck="true">// var fn = function(name) {</span><span class="token comment" spellcheck="true">//     console.log(`大家好，我叫${name}`);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn("追命");</span><span class="token comment" spellcheck="true">//改为一个箭头函数：</span><span class="token comment" spellcheck="true">// var fn = name=>{</span><span class="token comment" spellcheck="true">//     console.log(`大家好，我叫${name}`);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn("追命");</span><span class="token comment" spellcheck="true">// var fn = function(name,age) {</span><span class="token comment" spellcheck="true">//     console.log(`大家好，我叫${name},今年${age}岁了`);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn("追命",19);</span><span class="token comment" spellcheck="true">//改为一个箭头函数：</span><span class="token comment" spellcheck="true">// var fn = (name,age)=>{</span><span class="token comment" spellcheck="true">//     console.log(`大家好，我叫${name}`);</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn("追命");</span><span class="token comment" spellcheck="true">// var fn = function() {</span><span class="token comment" spellcheck="true">//     console.log("我叫追命");</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn();</span><span class="token comment" spellcheck="true">//改为一个箭头函数：</span><span class="token comment" spellcheck="true">// var fn = ()=> console.log("我叫追命");</span><span class="token comment" spellcheck="true">// fn();</span><span class="token comment" spellcheck="true">// var fn = function(a,b) {</span><span class="token comment" spellcheck="true">//     return a + b;</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 改为一个箭头函数：</span><span class="token comment" spellcheck="true">// var fn = (a,b)=>a + b;</span><span class="token comment" spellcheck="true">// // console.log(fn(1,2));</span><span class="token comment" spellcheck="true">// var c = fn(1,2);</span><span class="token comment" spellcheck="true">// console.log(c);</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26.箭头函数的注意点</title>
      <link href="/2017/11/01/nodejs/26.jian-tou-han-shu-de-zhu-yi-dian/"/>
      <url>/2017/11/01/nodejs/26.jian-tou-han-shu-de-zhu-yi-dian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* * @Author: Robyn  * @Date: 2017-10-31 20:27:24  * @Last Modified by:   Robyn  * @Last Modified time: 2017-10-31 20:27:24  */</span><span class="token comment" spellcheck="true">// a.箭头函数没有自己的this，函数体内部写的this，指向的是外层代码块的this</span><span class="token comment" spellcheck="true">// this.name = "迪丽热巴";</span><span class="token comment" spellcheck="true">// this.age = 15;</span><span class="token comment" spellcheck="true">// var girlFriend = {</span><span class="token comment" spellcheck="true">//     name: "刘亦菲",</span><span class="token comment" spellcheck="true">//     age: 16,</span><span class="token comment" spellcheck="true">//     // showLove: function() {</span><span class="token comment" spellcheck="true">//     //     console.log("大家好，我叫" + this.name + "今年" + this.age + "岁了,追命，么么哒！");</span><span class="token comment" spellcheck="true">//     // }</span><span class="token comment" spellcheck="true">//     showLove: ()=> {</span><span class="token comment" spellcheck="true">//         console.log("大家好，我叫" + this.name + "今年" + this.age + "岁了,追命，么么哒！");</span><span class="token comment" spellcheck="true">//     } </span><span class="token comment" spellcheck="true">// };</span><span class="token comment" spellcheck="true">// girlFriend.showLove();</span><span class="token comment" spellcheck="true">// b.箭头函数内部的this是定义时所在的对象，而不是使用时所在的对象并且不会改变</span><span class="token comment" spellcheck="true">// var girlFriend = {</span><span class="token comment" spellcheck="true">//     name: "刘亦菲",</span><span class="token comment" spellcheck="true">//     age: 16,</span><span class="token comment" spellcheck="true">//     showLove: function() {</span><span class="token comment" spellcheck="true">//         var fn = ()=> {</span><span class="token comment" spellcheck="true">//             console.log(this.name);</span><span class="token comment" spellcheck="true">//         }</span><span class="token comment" spellcheck="true">//         return fn;</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// };</span><span class="token comment" spellcheck="true">// var fn = girlFriend.showLove();</span><span class="token comment" spellcheck="true">// var obj = {</span><span class="token comment" spellcheck="true">//     name: "迪丽热巴"</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// fn.call(obj);</span><span class="token comment" spellcheck="true">// c.箭头箭头函数不能用作构造函数</span><span class="token comment" spellcheck="true">// var GirlFriend = function(name,age) {</span><span class="token comment" spellcheck="true">//     this.name = name;</span><span class="token comment" spellcheck="true">//     this.age = age;</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var myGf = new GirlFriend("热巴",15);</span><span class="token comment" spellcheck="true">// console.log(myGf.name,myGf.age);</span><span class="token comment" spellcheck="true">// var GirlFriend = (name,age)=> {</span><span class="token comment" spellcheck="true">//     this.name = name;</span><span class="token comment" spellcheck="true">//     this.age = age;</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var myGf = new GirlFriend("热巴",15);</span><span class="token comment" spellcheck="true">// console.log(myGf.name,myGf.age);</span><span class="token comment" spellcheck="true">// d.箭头函数内部不存在arguments，箭头函数体中使用的arguments其实指向的是外层函数的arguments</span><span class="token comment" spellcheck="true">// function fn() {</span><span class="token comment" spellcheck="true">//     console.log(arguments);//{ '0': 1, '1': 2, '2': 3, '3': 4, '4': 5, '5': 6, '6': 7, '7': 9 }</span><span class="token comment" spellcheck="true">//     var fn1 = function() {</span><span class="token comment" spellcheck="true">//         console.log(arguments);//{ '0': 'a', '1': 'b', '2': 'c' }</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//     return fn1;</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// var fn1 = fn(1,2,3,4,5,6,7,8,9);</span><span class="token comment" spellcheck="true">// fn1("a","b","c");</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> fn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fn1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28.express的基本路由</title>
      <link href="/2017/11/01/nodejs/28.express-de-ji-ben-lu-you/"/>
      <url>/2017/11/01/nodejs/28.express-de-ji-ben-lu-you/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入express文件</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置路由：</span><span class="token comment" spellcheck="true">//得到主页：/  get         --->index.html</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"您请求的是index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到新增页面：/add   get     ---->add.html</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"您请求的是add.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交新增数据：/add   post    ---->处理新增提交数据的逻辑</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"处理新增的提交数据中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27.hello world-express</title>
      <link href="/2017/11/01/nodejs/27.hello-world-express/"/>
      <url>/2017/11/01/nodejs/27.hello-world-express/</url>
      
        <content type="html"><![CDATA[<h3 id="1-首先先要下载express"><a href="#1-首先先要下载express" class="headerlink" title="1. 首先先要下载express"></a>1. 首先先要下载express</h3><blockquote><p>npm i express –save</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// //引入http模块</span><span class="token comment" spellcheck="true">// var http = require("http");</span><span class="token comment" spellcheck="true">// //创建一个服务器对象</span><span class="token comment" spellcheck="true">// var server = http.createServer();</span><span class="token comment" spellcheck="true">// //开启服务器</span><span class="token comment" spellcheck="true">// server.on("request",function(req,res){</span><span class="token comment" spellcheck="true">//      if(req.url == "/") {</span><span class="token comment" spellcheck="true">//          res.end("hello world");   </span><span class="token comment" spellcheck="true">//      }</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// //开启监听</span><span class="token comment" spellcheck="true">// server.listen(3000,function(){</span><span class="token comment" spellcheck="true">//     console.log("running");</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">//引入模块:express</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个服务器</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在express不需要设置request事件，因为express框架已经帮助我们设置好了，我们只需要直接设置路由就可以了</span><span class="token comment" spellcheck="true">//如果你发送的是get请求，并且请求的是根目录，那么这个服务器会返回一个hello world</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// res.send('Hello World!');</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        <span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'text/html;charset=utf-8'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"index页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>29.网站人口</title>
      <link href="/2017/11/01/nodejs/29.wang-zhan-ren-kou/"/>
      <url>/2017/11/01/nodejs/29.wang-zhan-ren-kou/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//引入express文件</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> outrouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./03外置路由.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建服务器</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// outrouter(app);</span><span class="token comment" spellcheck="true">//使用外置路由需要使用use方法</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>outrouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启监听</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">``</span></span>`</code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30.匿名函数传参</title>
      <link href="/2017/11/01/nodejs/30.ni-ming-han-shu-chuan-can/"/>
      <url>/2017/11/01/nodejs/30.ni-ming-han-shu-chuan-can/</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// fn(function(num1,num2,num3){</span><span class="token comment" spellcheck="true">//     console.log(num1 + num2 + num3);</span><span class="token comment" spellcheck="true">// });</span><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">,</span>num3<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token operator">+</span> num2<span class="token operator">+</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to robyn&#39;s blog</title>
      <link href="/2017/10/30/01.welcome/"/>
      <url>/2017/10/30/01.welcome/</url>
      
        <content type="html"><![CDATA[<center><br><a href="/">主页</a><br><a href="/tags/">标签</a><br><a href="/archives/">归档</a><br><br><a href="http://www.jianshu.com/u/86c7c137f770" target="_blank" rel="external">简书</a>                                <a href="https://github.com/robynnnn" target="_blank" rel="external">GitHub</a><br></center>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
